/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"TicketManager","desc":"","methods":[{"name":"createApplication","args":[{"name":"maintainerAddress","type":"address"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"createEvent","args":[{"name":"eventConfig","type":"(uint64,string,string,address,uint64,string,uint64,uint64,uint64,uint64)","struct":"EventConfig"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"deleteEvent","args":[{"name":"eventID","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"updateEvent","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}}],"arcs":[4,56],"structs":{"EventConfig":[{"name":"eventId","type":"uint64"},{"name":"eventName","type":"string"},{"name":"eventCategory","type":"string"},{"name":"eventCreator","type":"address"},{"name":"maxParticipants","type":"uint64"},{"name":"location","type":"string"},{"name":"startTime","type":"uint64"},{"name":"endTime","type":"uint64"},{"name":"registeredCount","type":"uint64"},{"name":"eventAppId","type":"uint64"}]},"state":{"schema":{"global":{"bytes":1,"ints":2},"local":{"bytes":0,"ints":0}},"keys":{"global":{"maintainerAddress":{"key":"bWFpbnRhaW5lckFkZHJlc3M=","keyType":"AVMBytes","valueType":"address"},"totalEvents":{"key":"dG90YWxFdmVudHM=","keyType":"AVMBytes","valueType":"uint64"},"lastEventID":{"key":"bGFzdEV2ZW50SUQ=","keyType":"AVMBytes","valueType":"uint64"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"allEvents":{"keyType":"uint64","valueType":"EventConfig"}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts\\TicketManager.algo.ts:20","pc":[0]},{"teal":2,"source":"contracts\\TicketManager.algo.ts:20","pc":[1,2,3,4]},{"teal":3,"source":"contracts\\TicketManager.algo.ts:20","pc":[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]},{"teal":15,"source":"contracts\\TicketManager.algo.ts:20","pc":[32,33]},{"teal":16,"source":"contracts\\TicketManager.algo.ts:20","pc":[34]},{"teal":17,"source":"contracts\\TicketManager.algo.ts:20","pc":[35,36]},{"teal":18,"source":"contracts\\TicketManager.algo.ts:20","pc":[37]},{"teal":19,"source":"contracts\\TicketManager.algo.ts:20","pc":[38,39]},{"teal":20,"source":"contracts\\TicketManager.algo.ts:20","pc":[40]},{"teal":21,"source":"contracts\\TicketManager.algo.ts:20","pc":[41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66]},{"teal":25,"source":"contracts\\TicketManager.algo.ts:20","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[67]},{"teal":30,"source":"contracts\\TicketManager.algo.ts:31","pc":[68,69,70]},{"teal":31,"source":"contracts\\TicketManager.algo.ts:31","pc":[71]},{"teal":32,"source":"contracts\\TicketManager.algo.ts:31","pc":[72]},{"teal":33,"source":"contracts\\TicketManager.algo.ts:31","pc":[73,74]},{"teal":34,"source":"contracts\\TicketManager.algo.ts:31","pc":[75]},{"teal":37,"source":"contracts\\TicketManager.algo.ts:31","errorMessage":"argument 0 (maintainerAddress) for createApplication must be a address","pc":[76]},{"teal":40,"source":"contracts\\TicketManager.algo.ts:31","pc":[77,78,79]},{"teal":41,"source":"contracts\\TicketManager.algo.ts:31","pc":[80]},{"teal":42,"source":"contracts\\TicketManager.algo.ts:31","pc":[81]},{"teal":46,"source":"contracts\\TicketManager.algo.ts:31","pc":[82,83,84]},{"teal":50,"source":"contracts\\TicketManager.algo.ts:32","pc":[85]},{"teal":51,"source":"contracts\\TicketManager.algo.ts:32","pc":[86,87]},{"teal":52,"source":"contracts\\TicketManager.algo.ts:32","pc":[88]},{"teal":56,"source":"contracts\\TicketManager.algo.ts:33","pc":[89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107]},{"teal":57,"source":"contracts\\TicketManager.algo.ts:33","pc":[108,109]},{"teal":58,"source":"contracts\\TicketManager.algo.ts:33","pc":[110]},{"teal":62,"source":"contracts\\TicketManager.algo.ts:34","pc":[111]},{"teal":63,"source":"contracts\\TicketManager.algo.ts:34","pc":[112]},{"teal":64,"source":"contracts\\TicketManager.algo.ts:34","pc":[113]},{"teal":65,"source":"contracts\\TicketManager.algo.ts:31","pc":[114]},{"teal":70,"source":"contracts\\TicketManager.algo.ts:37","pc":[115,116,117]},{"teal":73,"source":"contracts\\TicketManager.algo.ts:37","pc":[118,119,120]},{"teal":74,"source":"contracts\\TicketManager.algo.ts:37","pc":[121]},{"teal":75,"source":"contracts\\TicketManager.algo.ts:37","pc":[122]},{"teal":79,"source":"contracts\\TicketManager.algo.ts:37","pc":[123,124,125]},{"teal":82,"source":"contracts\\TicketManager.algo.ts:37","pc":[126]},{"teal":97,"source":"contracts\\TicketManager.algo.ts:38","pc":[127]},{"teal":98,"source":"contracts\\TicketManager.algo.ts:38","pc":[128]},{"teal":99,"source":"contracts\\TicketManager.algo.ts:38","pc":[129,130,131,132]},{"teal":100,"source":"contracts\\TicketManager.algo.ts:39","pc":[133]},{"teal":101,"source":"contracts\\TicketManager.algo.ts:39","pc":[134]},{"teal":102,"source":"contracts\\TicketManager.algo.ts:39","pc":[135]},{"teal":103,"source":"contracts\\TicketManager.algo.ts:39","pc":[136,137,138]},{"teal":104,"source":"contracts\\TicketManager.algo.ts:40","pc":[139,140]},{"teal":105,"source":"contracts\\TicketManager.algo.ts:40","pc":[141,142]},{"teal":106,"source":"contracts\\TicketManager.algo.ts:40","pc":[143,144]},{"teal":107,"source":"contracts\\TicketManager.algo.ts:40","pc":[145,146]},{"teal":108,"source":"contracts\\TicketManager.algo.ts:40","pc":[147,148]},{"teal":109,"source":"contracts\\TicketManager.algo.ts:40","pc":[149,150]},{"teal":110,"source":"contracts\\TicketManager.algo.ts:40","pc":[151]},{"teal":111,"source":"contracts\\TicketManager.algo.ts:40","pc":[152]},{"teal":112,"source":"contracts\\TicketManager.algo.ts:40","pc":[153,154]},{"teal":113,"source":"contracts\\TicketManager.algo.ts:40","pc":[155]},{"teal":114,"source":"contracts\\TicketManager.algo.ts:40","pc":[156]},{"teal":115,"source":"contracts\\TicketManager.algo.ts:40","pc":[157]},{"teal":116,"source":"contracts\\TicketManager.algo.ts:40","pc":[158]},{"teal":117,"source":"contracts\\TicketManager.algo.ts:40","pc":[159]},{"teal":118,"source":"contracts\\TicketManager.algo.ts:40","pc":[160]},{"teal":119,"source":"contracts\\TicketManager.algo.ts:40","pc":[161]},{"teal":120,"source":"contracts\\TicketManager.algo.ts:40","pc":[162,163,164]},{"teal":121,"source":"contracts\\TicketManager.algo.ts:40","pc":[165]},{"teal":122,"source":"contracts\\TicketManager.algo.ts:40","pc":[166]},{"teal":123,"source":"contracts\\TicketManager.algo.ts:40","pc":[167]},{"teal":124,"source":"contracts\\TicketManager.algo.ts:40","pc":[168,169,170]},{"teal":125,"source":"contracts\\TicketManager.algo.ts:40","pc":[171]},{"teal":126,"source":"contracts\\TicketManager.algo.ts:40","pc":[172]},{"teal":127,"source":"contracts\\TicketManager.algo.ts:40","pc":[173,174,175]},{"teal":128,"source":"contracts\\TicketManager.algo.ts:41","pc":[176,177]},{"teal":129,"source":"contracts\\TicketManager.algo.ts:41","pc":[178,179]},{"teal":130,"source":"contracts\\TicketManager.algo.ts:41","pc":[180,181]},{"teal":131,"source":"contracts\\TicketManager.algo.ts:41","pc":[182,183]},{"teal":132,"source":"contracts\\TicketManager.algo.ts:41","pc":[184,185]},{"teal":133,"source":"contracts\\TicketManager.algo.ts:41","pc":[186,187]},{"teal":134,"source":"contracts\\TicketManager.algo.ts:41","pc":[188]},{"teal":135,"source":"contracts\\TicketManager.algo.ts:41","pc":[189]},{"teal":136,"source":"contracts\\TicketManager.algo.ts:41","pc":[190,191]},{"teal":137,"source":"contracts\\TicketManager.algo.ts:41","pc":[192]},{"teal":138,"source":"contracts\\TicketManager.algo.ts:41","pc":[193]},{"teal":139,"source":"contracts\\TicketManager.algo.ts:41","pc":[194]},{"teal":140,"source":"contracts\\TicketManager.algo.ts:41","pc":[195]},{"teal":141,"source":"contracts\\TicketManager.algo.ts:41","pc":[196]},{"teal":142,"source":"contracts\\TicketManager.algo.ts:41","pc":[197]},{"teal":143,"source":"contracts\\TicketManager.algo.ts:41","pc":[198]},{"teal":144,"source":"contracts\\TicketManager.algo.ts:41","pc":[199,200,201]},{"teal":145,"source":"contracts\\TicketManager.algo.ts:41","pc":[202]},{"teal":146,"source":"contracts\\TicketManager.algo.ts:41","pc":[203]},{"teal":147,"source":"contracts\\TicketManager.algo.ts:41","pc":[204]},{"teal":148,"source":"contracts\\TicketManager.algo.ts:41","pc":[205,206,207]},{"teal":149,"source":"contracts\\TicketManager.algo.ts:41","pc":[208]},{"teal":150,"source":"contracts\\TicketManager.algo.ts:41","pc":[209]},{"teal":151,"source":"contracts\\TicketManager.algo.ts:41","pc":[210,211,212]},{"teal":152,"source":"contracts\\TicketManager.algo.ts:42","pc":[213,214]},{"teal":153,"source":"contracts\\TicketManager.algo.ts:42","pc":[215,216]},{"teal":154,"source":"contracts\\TicketManager.algo.ts:42","pc":[217,218]},{"teal":155,"source":"contracts\\TicketManager.algo.ts:42","pc":[219,220,221]},{"teal":156,"source":"contracts\\TicketManager.algo.ts:42","pc":[222,223,224]},{"teal":157,"source":"contracts\\TicketManager.algo.ts:43","pc":[225,226]},{"teal":158,"source":"contracts\\TicketManager.algo.ts:43","pc":[227,228]},{"teal":159,"source":"contracts\\TicketManager.algo.ts:43","pc":[229,230]},{"teal":160,"source":"contracts\\TicketManager.algo.ts:43","pc":[231,232,233]},{"teal":161,"source":"contracts\\TicketManager.algo.ts:43","pc":[234]},{"teal":162,"source":"contracts\\TicketManager.algo.ts:43","pc":[235]},{"teal":163,"source":"contracts\\TicketManager.algo.ts:43","pc":[236,237,238]},{"teal":164,"source":"contracts\\TicketManager.algo.ts:44","pc":[239,240]},{"teal":165,"source":"contracts\\TicketManager.algo.ts:44","pc":[241,242]},{"teal":166,"source":"contracts\\TicketManager.algo.ts:44","pc":[243,244]},{"teal":167,"source":"contracts\\TicketManager.algo.ts:44","pc":[245,246]},{"teal":168,"source":"contracts\\TicketManager.algo.ts:44","pc":[247,248]},{"teal":169,"source":"contracts\\TicketManager.algo.ts:44","pc":[249,250]},{"teal":170,"source":"contracts\\TicketManager.algo.ts:44","pc":[251]},{"teal":171,"source":"contracts\\TicketManager.algo.ts:44","pc":[252]},{"teal":172,"source":"contracts\\TicketManager.algo.ts:44","pc":[253,254]},{"teal":173,"source":"contracts\\TicketManager.algo.ts:44","pc":[255]},{"teal":174,"source":"contracts\\TicketManager.algo.ts:44","pc":[256]},{"teal":175,"source":"contracts\\TicketManager.algo.ts:44","pc":[257]},{"teal":176,"source":"contracts\\TicketManager.algo.ts:44","pc":[258]},{"teal":177,"source":"contracts\\TicketManager.algo.ts:44","pc":[259]},{"teal":178,"source":"contracts\\TicketManager.algo.ts:44","pc":[260]},{"teal":179,"source":"contracts\\TicketManager.algo.ts:44","pc":[261]},{"teal":180,"source":"contracts\\TicketManager.algo.ts:44","pc":[262,263,264]},{"teal":181,"source":"contracts\\TicketManager.algo.ts:44","pc":[265]},{"teal":182,"source":"contracts\\TicketManager.algo.ts:44","pc":[266]},{"teal":183,"source":"contracts\\TicketManager.algo.ts:44","pc":[267]},{"teal":184,"source":"contracts\\TicketManager.algo.ts:44","pc":[268,269,270]},{"teal":185,"source":"contracts\\TicketManager.algo.ts:44","pc":[271]},{"teal":186,"source":"contracts\\TicketManager.algo.ts:44","pc":[272]},{"teal":187,"source":"contracts\\TicketManager.algo.ts:44","pc":[273,274,275]},{"teal":188,"source":"contracts\\TicketManager.algo.ts:45","pc":[276,277]},{"teal":189,"source":"contracts\\TicketManager.algo.ts:45","pc":[278,279]},{"teal":190,"source":"contracts\\TicketManager.algo.ts:45","pc":[280,281]},{"teal":191,"source":"contracts\\TicketManager.algo.ts:45","pc":[282,283,284]},{"teal":192,"source":"contracts\\TicketManager.algo.ts:45","pc":[285]},{"teal":193,"source":"contracts\\TicketManager.algo.ts:45","pc":[286]},{"teal":194,"source":"contracts\\TicketManager.algo.ts:45","pc":[287,288,289]},{"teal":195,"source":"contracts\\TicketManager.algo.ts:46","pc":[290,291]},{"teal":196,"source":"contracts\\TicketManager.algo.ts:46","pc":[292,293]},{"teal":197,"source":"contracts\\TicketManager.algo.ts:46","pc":[294,295]},{"teal":198,"source":"contracts\\TicketManager.algo.ts:46","pc":[296,297,298]},{"teal":199,"source":"contracts\\TicketManager.algo.ts:46","pc":[299]},{"teal":200,"source":"contracts\\TicketManager.algo.ts:46","pc":[300]},{"teal":201,"source":"contracts\\TicketManager.algo.ts:46","pc":[301,302,303]},{"teal":202,"source":"contracts\\TicketManager.algo.ts:47","pc":[304,305]},{"teal":203,"source":"contracts\\TicketManager.algo.ts:47","pc":[306,307]},{"teal":204,"source":"contracts\\TicketManager.algo.ts:47","pc":[308,309]},{"teal":205,"source":"contracts\\TicketManager.algo.ts:47","pc":[310,311,312]},{"teal":206,"source":"contracts\\TicketManager.algo.ts:47","pc":[313]},{"teal":207,"source":"contracts\\TicketManager.algo.ts:47","pc":[314]},{"teal":208,"source":"contracts\\TicketManager.algo.ts:47","pc":[315,316,317]},{"teal":209,"source":"contracts\\TicketManager.algo.ts:48","pc":[318,319]},{"teal":210,"source":"contracts\\TicketManager.algo.ts:48","pc":[320,321]},{"teal":211,"source":"contracts\\TicketManager.algo.ts:48","pc":[322,323]},{"teal":212,"source":"contracts\\TicketManager.algo.ts:48","pc":[324,325,326]},{"teal":213,"source":"contracts\\TicketManager.algo.ts:48","pc":[327]},{"teal":214,"source":"contracts\\TicketManager.algo.ts:48","pc":[328]},{"teal":215,"source":"contracts\\TicketManager.algo.ts:48","pc":[329,330,331]},{"teal":216,"source":"contracts\\TicketManager.algo.ts:38","pc":[332]},{"teal":217,"source":"contracts\\TicketManager.algo.ts:38","pc":[333]},{"teal":218,"source":"contracts\\TicketManager.algo.ts:38","pc":[334,335]},{"teal":222,"source":"contracts\\TicketManager.algo.ts:51","pc":[336]},{"teal":223,"source":"contracts\\TicketManager.algo.ts:51","pc":[337]},{"teal":224,"source":"contracts\\TicketManager.algo.ts:51","pc":[338]},{"teal":225,"source":"contracts\\TicketManager.algo.ts:51","pc":[339]},{"teal":226,"source":"contracts\\TicketManager.algo.ts:51","pc":[340]},{"teal":227,"source":"contracts\\TicketManager.algo.ts:51","pc":[341]},{"teal":228,"source":"contracts\\TicketManager.algo.ts:51","pc":[342,343]},{"teal":229,"source":"contracts\\TicketManager.algo.ts:51","pc":[344]},{"teal":233,"source":"contracts\\TicketManager.algo.ts:52","pc":[345]},{"teal":234,"source":"contracts\\TicketManager.algo.ts:52","pc":[346]},{"teal":235,"source":"contracts\\TicketManager.algo.ts:52","pc":[347]},{"teal":236,"source":"contracts\\TicketManager.algo.ts:52","pc":[348]},{"teal":237,"source":"contracts\\TicketManager.algo.ts:52","pc":[349]},{"teal":238,"source":"contracts\\TicketManager.algo.ts:52","pc":[350]},{"teal":239,"source":"contracts\\TicketManager.algo.ts:52","pc":[351]},{"teal":243,"source":"contracts\\TicketManager.algo.ts:53","pc":[352]},{"teal":244,"source":"contracts\\TicketManager.algo.ts:53","pc":[353]},{"teal":245,"source":"contracts\\TicketManager.algo.ts:53","pc":[354]},{"teal":246,"source":"contracts\\TicketManager.algo.ts:53","pc":[355]},{"teal":247,"source":"contracts\\TicketManager.algo.ts:53","pc":[356]},{"teal":248,"source":"contracts\\TicketManager.algo.ts:53","pc":[357]},{"teal":249,"source":"contracts\\TicketManager.algo.ts:53","pc":[358]},{"teal":250,"source":"contracts\\TicketManager.algo.ts:37","pc":[359]},{"teal":255,"source":"contracts\\TicketManager.algo.ts:58","pc":[360,361,362]},{"teal":256,"source":"contracts\\TicketManager.algo.ts:58","pc":[363]},{"teal":259,"source":"contracts\\TicketManager.algo.ts:58","pc":[364,365,366]},{"teal":260,"source":"contracts\\TicketManager.algo.ts:58","pc":[367]},{"teal":261,"source":"contracts\\TicketManager.algo.ts:58","pc":[368]},{"teal":265,"source":"contracts\\TicketManager.algo.ts:58","pc":[369,370,371]},{"teal":269,"source":"contracts\\TicketManager.algo.ts:60","pc":[372,373]},{"teal":270,"source":"contracts\\TicketManager.algo.ts:60","pc":[374,375,376]},{"teal":271,"source":"contracts\\TicketManager.algo.ts:60","pc":[377,378]},{"teal":272,"source":"contracts\\TicketManager.algo.ts:60","pc":[379]},{"teal":273,"source":"contracts\\TicketManager.algo.ts:60","pc":[380]},{"teal":274,"source":"contracts\\TicketManager.algo.ts:60","pc":[381]},{"teal":278,"source":"contracts\\TicketManager.algo.ts:63","pc":[382,383]},{"teal":279,"source":"contracts\\TicketManager.algo.ts:63","pc":[384]},{"teal":280,"source":"contracts\\TicketManager.algo.ts:63","pc":[385]},{"teal":281,"source":"contracts\\TicketManager.algo.ts:58","pc":[386]},{"teal":286,"source":"contracts\\TicketManager.algo.ts:71","pc":[387,388,389]},{"teal":287,"source":"contracts\\TicketManager.algo.ts:71","pc":[390]},{"teal":288,"source":"contracts\\TicketManager.algo.ts:71","pc":[391]},{"teal":292,"source":"contracts\\TicketManager.algo.ts:71","pc":[392,393,394]},{"teal":293,"source":"contracts\\TicketManager.algo.ts:71","pc":[395]},{"teal":296,"source":"contracts\\TicketManager.algo.ts:20","pc":[396,397,398,399,400,401]},{"teal":297,"source":"contracts\\TicketManager.algo.ts:20","pc":[402,403,404]},{"teal":298,"source":"contracts\\TicketManager.algo.ts:20","pc":[405,406,407,408]},{"teal":301,"source":"contracts\\TicketManager.algo.ts:20","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[409]},{"teal":304,"source":"contracts\\TicketManager.algo.ts:20","pc":[410,411,412,413,414,415]},{"teal":305,"source":"contracts\\TicketManager.algo.ts:20","pc":[416,417,418,419,420,421]},{"teal":306,"source":"contracts\\TicketManager.algo.ts:20","pc":[422,423,424,425,426,427]},{"teal":307,"source":"contracts\\TicketManager.algo.ts:20","pc":[428,429,430]},{"teal":308,"source":"contracts\\TicketManager.algo.ts:20","pc":[431,432,433,434,435,436,437,438]},{"teal":311,"source":"contracts\\TicketManager.algo.ts:20","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[439]},{"teal":314,"source":"contracts\\TicketManager.algo.ts:20","pc":[440,441,442]},{"teal":315,"source":"contracts\\TicketManager.algo.ts:20","pc":[443,444]},{"teal":316,"source":"contracts\\TicketManager.algo.ts:20","pc":[445,446]},{"teal":317,"source":"contracts\\TicketManager.algo.ts:20","pc":[447]},{"teal":318,"source":"contracts\\TicketManager.algo.ts:20","pc":[448,449]},{"teal":319,"source":"contracts\\TicketManager.algo.ts:20","pc":[450,451]},{"teal":320,"source":"contracts\\TicketManager.algo.ts:20","pc":[452]},{"teal":323,"source":"contracts\\TicketManager.algo.ts:20","pc":[453,454,455]},{"teal":324,"source":"contracts\\TicketManager.algo.ts:20","pc":[456,457]},{"teal":325,"source":"contracts\\TicketManager.algo.ts:20","pc":[458,459]},{"teal":326,"source":"contracts\\TicketManager.algo.ts:20","pc":[460]},{"teal":327,"source":"contracts\\TicketManager.algo.ts:20","pc":[461,462]},{"teal":328,"source":"contracts\\TicketManager.algo.ts:20","pc":[463,464]},{"teal":329,"source":"contracts\\TicketManager.algo.ts:20","pc":[465]},{"teal":330,"source":"contracts\\TicketManager.algo.ts:20","pc":[466]},{"teal":331,"source":"contracts\\TicketManager.algo.ts:20","pc":[467,468]},{"teal":332,"source":"contracts\\TicketManager.algo.ts:20","pc":[469]},{"teal":333,"source":"contracts\\TicketManager.algo.ts:20","pc":[470]},{"teal":334,"source":"contracts\\TicketManager.algo.ts:20","pc":[471]},{"teal":335,"source":"contracts\\TicketManager.algo.ts:20","pc":[472,473,474]},{"teal":336,"source":"contracts\\TicketManager.algo.ts:20","pc":[475,476]},{"teal":337,"source":"contracts\\TicketManager.algo.ts:20","pc":[477,478]},{"teal":338,"source":"contracts\\TicketManager.algo.ts:20","pc":[479]},{"teal":339,"source":"contracts\\TicketManager.algo.ts:20","pc":[480]},{"teal":340,"source":"contracts\\TicketManager.algo.ts:20","pc":[481,482]},{"teal":341,"source":"contracts\\TicketManager.algo.ts:20","pc":[483,484]},{"teal":342,"source":"contracts\\TicketManager.algo.ts:20","pc":[485,486]},{"teal":343,"source":"contracts\\TicketManager.algo.ts:20","pc":[487,488]},{"teal":344,"source":"contracts\\TicketManager.algo.ts:20","pc":[489]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDEwCmludGNibG9jayAxIDIKYnl0ZWNibG9jayAweDZjNjE3Mzc0NDU3NjY1NmU3NDQ5NDQgMHg3NDZmNzQ2MTZjNDU3NjY1NmU3NDczIDB4CgovLyBUaGlzIFRFQUwgd2FzIGdlbmVyYXRlZCBieSBURUFMU2NyaXB0IHYwLjEwNi4zCi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbGdvcmFuZGZvdW5kYXRpb24vVEVBTFNjcmlwdAoKLy8gVGhpcyBjb250cmFjdCBpcyBjb21wbGlhbnQgd2l0aCBhbmQvb3IgaW1wbGVtZW50cyB0aGUgZm9sbG93aW5nIEFSQ3M6IFsgQVJDNCBdCgovLyBUaGUgZm9sbG93aW5nIHRlbiBsaW5lcyBvZiBURUFMIGhhbmRsZSBpbml0aWFsIHByb2dyYW0gZmxvdwovLyBUaGlzIHBhdHRlcm4gaXMgdXNlZCB0byBtYWtlIGl0IGVhc3kgZm9yIGFueW9uZSB0byBwYXJzZSB0aGUgc3RhcnQgb2YgdGhlIHByb2dyYW0gYW5kIGRldGVybWluZSBpZiBhIHNwZWNpZmljIGFjdGlvbiBpcyBhbGxvd2VkCi8vIEhlcmUsIGFjdGlvbiByZWZlcnMgdG8gdGhlIE9uQ29tcGxldGUgaW4gY29tYmluYXRpb24gd2l0aCB3aGV0aGVyIHRoZSBhcHAgaXMgYmVpbmcgY3JlYXRlZCBvciBjYWxsZWQKLy8gRXZlcnkgcG9zc2libGUgYWN0aW9uIGZvciB0aGlzIGNvbnRyYWN0IGlzIHJlcHJlc2VudGVkIGluIHRoZSBzd2l0Y2ggc3RhdGVtZW50Ci8vIElmIHRoZSBhY3Rpb24gaXMgbm90IGltcGxlbWVudGVkIGluIHRoZSBjb250cmFjdCwgaXRzIHJlc3BlY3RpdmUgYnJhbmNoIHdpbGwgYmUgIipOT1RfSU1QTEVNRU5URUQiIHdoaWNoIGp1c3QgY29udGFpbnMgImVyciIKdHhuIEFwcGxpY2F0aW9uSUQKIQpwdXNoaW50IDYKKgp0eG4gT25Db21wbGV0aW9uCisKc3dpdGNoICpjYWxsX05vT3AgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpjcmVhdGVfTm9PcCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQKCipOT1RfSU1QTEVNRU5URUQ6CgkvLyBUaGUgcmVxdWVzdGVkIGFjdGlvbiBpcyBub3QgaW1wbGVtZW50ZWQgaW4gdGhpcyBjb250cmFjdC4gQXJlIHlvdSB1c2luZyB0aGUgY29ycmVjdCBPbkNvbXBsZXRlPyBEaWQgeW91IHNldCB5b3VyIGFwcCBJRD8KCWVycgoKLy8gY3JlYXRlQXBwbGljYXRpb24oYWRkcmVzcyl2b2lkCiphYmlfcm91dGVfY3JlYXRlQXBwbGljYXRpb246CgkvLyBtYWludGFpbmVyQWRkcmVzczogYWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCXB1c2hpbnQgMzIKCT09CgoJLy8gYXJndW1lbnQgMCAobWFpbnRhaW5lckFkZHJlc3MpIGZvciBjcmVhdGVBcHBsaWNhdGlvbiBtdXN0IGJlIGEgYWRkcmVzcwoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBjcmVhdGVBcHBsaWNhdGlvbihhZGRyZXNzKXZvaWQKCWNhbGxzdWIgY3JlYXRlQXBwbGljYXRpb24KCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIGNyZWF0ZUFwcGxpY2F0aW9uKG1haW50YWluZXJBZGRyZXNzOiBBZGRyZXNzKTogdm9pZApjcmVhdGVBcHBsaWNhdGlvbjoKCXByb3RvIDEgMAoKCS8vIGNvbnRyYWN0c1xUaWNrZXRNYW5hZ2VyLmFsZ28udHM6MzIKCS8vIHRoaXMudG90YWxFdmVudHMudmFsdWUgPSAwCglieXRlYyAxIC8vICAidG90YWxFdmVudHMiCglwdXNoaW50IDAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzXFRpY2tldE1hbmFnZXIuYWxnby50czozMwoJLy8gdGhpcy5tYWludGFpbmVyQWRkcmVzcy52YWx1ZSA9IG1haW50YWluZXJBZGRyZXNzCglwdXNoYnl0ZXMgMHg2ZDYxNjk2ZTc0NjE2OTZlNjU3MjQxNjQ2NDcyNjU3MzczIC8vICJtYWludGFpbmVyQWRkcmVzcyIKCWZyYW1lX2RpZyAtMSAvLyBtYWludGFpbmVyQWRkcmVzczogQWRkcmVzcwoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHNcVGlja2V0TWFuYWdlci5hbGdvLnRzOjM0CgkvLyB0aGlzLmxhc3RFdmVudElELnZhbHVlID0gMQoJYnl0ZWMgMCAvLyAgImxhc3RFdmVudElEIgoJaW50YyAwIC8vIDEKCWFwcF9nbG9iYWxfcHV0CglyZXRzdWIKCi8vIGNyZWF0ZUV2ZW50KCh1aW50NjQsc3RyaW5nLHN0cmluZyxhZGRyZXNzLHVpbnQ2NCxzdHJpbmcsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0KSl2b2lkCiphYmlfcm91dGVfY3JlYXRlRXZlbnQ6CgkvLyBldmVudENvbmZpZzogKHVpbnQ2NCxzdHJpbmcsc3RyaW5nLGFkZHJlc3MsdWludDY0LHN0cmluZyx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQpCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCgoJLy8gZXhlY3V0ZSBjcmVhdGVFdmVudCgodWludDY0LHN0cmluZyxzdHJpbmcsYWRkcmVzcyx1aW50NjQsc3RyaW5nLHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCkpdm9pZAoJY2FsbHN1YiBjcmVhdGVFdmVudAoJaW50YyAwIC8vIDEKCXJldHVybgoKLy8gY3JlYXRlRXZlbnQoZXZlbnRDb25maWc6IEV2ZW50Q29uZmlnKTogdm9pZApjcmVhdGVFdmVudDoKCXByb3RvIDEgMAoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlYyAyIC8vIDB4CgoJLy8gY29udHJhY3RzXFRpY2tldE1hbmFnZXIuYWxnby50czozOAoJLy8gbmV3RXZlbnQ6IEV2ZW50Q29uZmlnID0gewoJLy8gICAgICAgICAgICAgRXZlbnRJRDogdGhpcy5sYXN0RXZlbnRJRC52YWx1ZSwKCS8vICAgICAgICAgICAgIEV2ZW50TmFtZTogZXZlbnRDb25maWcuRXZlbnROYW1lLAoJLy8gICAgICAgICAgICAgRXZlbnRDYXRlZ29yeTogZXZlbnRDb25maWcuRXZlbnRDYXRlZ29yeSwKCS8vICAgICAgICAgICAgIEV2ZW50Q3JlYXRvcjogZXZlbnRDb25maWcuRXZlbnRDcmVhdG9yLAoJLy8gICAgICAgICAgICAgTWF4UGFydGljaXBhbnRzOiBldmVudENvbmZpZy5NYXhQYXJ0aWNpcGFudHMsCgkvLyAgICAgICAgICAgICBMb2NhdGlvbjogZXZlbnRDb25maWcuTG9jYXRpb24sCgkvLyAgICAgICAgICAgICBTdGFydFRpbWU6IGV2ZW50Q29uZmlnLlN0YXJ0VGltZSwKCS8vICAgICAgICAgICAgIEVuZFRpbWU6IGV2ZW50Q29uZmlnLkVuZFRpbWUsCgkvLyAgICAgICAgICAgICBSZWdpc3RlcmVkQ291bnQ6IGV2ZW50Q29uZmlnLlJlZ2lzdGVyZWRDb3VudCwKCS8vICAgICAgICAgICAgIEV2ZW50QXBwSUQ6IGV2ZW50Q29uZmlnLkV2ZW50QXBwSUQKCS8vICAgICAgICAgfQoJYnl0ZWMgMiAvLyAgaW5pdGlhbCBoZWFkCglieXRlYyAyIC8vICBpbml0aWFsIHRhaWwKCXB1c2hieXRlcyAweDAwNTYgLy8gaW5pdGlhbCBoZWFkIG9mZnNldAoJYnl0ZWMgMCAvLyAgImxhc3RFdmVudElEIgoJYXBwX2dsb2JhbF9nZXQKCWl0b2IKCWNhbGxzdWIgKnByb2Nlc3Nfc3RhdGljX3R1cGxlX2VsZW1lbnQKCWZyYW1lX2RpZyAtMSAvLyBldmVudENvbmZpZzogRXZlbnRDb25maWcKCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5CglwdXNoaW50IDgKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCXVuY292ZXIgMgoJZXh0cmFjdF91aW50MTYKCWR1cCAvLyBkdXBsaWNhdGUgc3RhcnQgb2YgZWxlbWVudAoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJc3dhcAoJZXh0cmFjdF91aW50MTYgLy8gZ2V0IG51bWJlciBvZiBlbGVtZW50cwoJaW50YyAwIC8vICBnZXQgdHlwZSBsZW5ndGgKCSogLy8gbXVsdGlwbHkgYnkgdHlwZSBsZW5ndGgKCWludGMgMSAvLyAyCgkrIC8vIGFkZCB0d28gZm9yIGxlbmd0aAoJZXh0cmFjdDMKCWV4dHJhY3QgMiAwCglkdXAKCWxlbgoJaXRvYgoJZXh0cmFjdCA2IDIKCXN3YXAKCWNvbmNhdAoJY2FsbHN1YiAqcHJvY2Vzc19keW5hbWljX3R1cGxlX2VsZW1lbnQKCWZyYW1lX2RpZyAtMSAvLyBldmVudENvbmZpZzogRXZlbnRDb25maWcKCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5CglwdXNoaW50IDEwCglsb2FkIDI1NSAvLyBmdWxsIGFycmF5Cglsb2FkIDI1NSAvLyBmdWxsIGFycmF5Cgl1bmNvdmVyIDIKCWV4dHJhY3RfdWludDE2CglkdXAgLy8gZHVwbGljYXRlIHN0YXJ0IG9mIGVsZW1lbnQKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCXN3YXAKCWV4dHJhY3RfdWludDE2IC8vIGdldCBudW1iZXIgb2YgZWxlbWVudHMKCWludGMgMCAvLyAgZ2V0IHR5cGUgbGVuZ3RoCgkqIC8vIG11bHRpcGx5IGJ5IHR5cGUgbGVuZ3RoCglpbnRjIDEgLy8gMgoJKyAvLyBhZGQgdHdvIGZvciBsZW5ndGgKCWV4dHJhY3QzCglleHRyYWN0IDIgMAoJZHVwCglsZW4KCWl0b2IKCWV4dHJhY3QgNiAyCglzd2FwCgljb25jYXQKCWNhbGxzdWIgKnByb2Nlc3NfZHluYW1pY190dXBsZV9lbGVtZW50CglmcmFtZV9kaWcgLTEgLy8gZXZlbnRDb25maWc6IEV2ZW50Q29uZmlnCglzdG9yZSAyNTUgLy8gZnVsbCBhcnJheQoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJZXh0cmFjdCAxMiAzMgoJY2FsbHN1YiAqcHJvY2Vzc19zdGF0aWNfdHVwbGVfZWxlbWVudAoJZnJhbWVfZGlnIC0xIC8vIGV2ZW50Q29uZmlnOiBFdmVudENvbmZpZwoJc3RvcmUgMjU1IC8vIGZ1bGwgYXJyYXkKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCWV4dHJhY3QgNDQgOAoJYnRvaQoJaXRvYgoJY2FsbHN1YiAqcHJvY2Vzc19zdGF0aWNfdHVwbGVfZWxlbWVudAoJZnJhbWVfZGlnIC0xIC8vIGV2ZW50Q29uZmlnOiBFdmVudENvbmZpZwoJc3RvcmUgMjU1IC8vIGZ1bGwgYXJyYXkKCXB1c2hpbnQgNTIKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCXVuY292ZXIgMgoJZXh0cmFjdF91aW50MTYKCWR1cCAvLyBkdXBsaWNhdGUgc3RhcnQgb2YgZWxlbWVudAoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJc3dhcAoJZXh0cmFjdF91aW50MTYgLy8gZ2V0IG51bWJlciBvZiBlbGVtZW50cwoJaW50YyAwIC8vICBnZXQgdHlwZSBsZW5ndGgKCSogLy8gbXVsdGlwbHkgYnkgdHlwZSBsZW5ndGgKCWludGMgMSAvLyAyCgkrIC8vIGFkZCB0d28gZm9yIGxlbmd0aAoJZXh0cmFjdDMKCWV4dHJhY3QgMiAwCglkdXAKCWxlbgoJaXRvYgoJZXh0cmFjdCA2IDIKCXN3YXAKCWNvbmNhdAoJY2FsbHN1YiAqcHJvY2Vzc19keW5hbWljX3R1cGxlX2VsZW1lbnQKCWZyYW1lX2RpZyAtMSAvLyBldmVudENvbmZpZzogRXZlbnRDb25maWcKCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5Cglsb2FkIDI1NSAvLyBmdWxsIGFycmF5CglleHRyYWN0IDU0IDgKCWJ0b2kKCWl0b2IKCWNhbGxzdWIgKnByb2Nlc3Nfc3RhdGljX3R1cGxlX2VsZW1lbnQKCWZyYW1lX2RpZyAtMSAvLyBldmVudENvbmZpZzogRXZlbnRDb25maWcKCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5Cglsb2FkIDI1NSAvLyBmdWxsIGFycmF5CglleHRyYWN0IDYyIDgKCWJ0b2kKCWl0b2IKCWNhbGxzdWIgKnByb2Nlc3Nfc3RhdGljX3R1cGxlX2VsZW1lbnQKCWZyYW1lX2RpZyAtMSAvLyBldmVudENvbmZpZzogRXZlbnRDb25maWcKCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5Cglsb2FkIDI1NSAvLyBmdWxsIGFycmF5CglleHRyYWN0IDcwIDgKCWJ0b2kKCWl0b2IKCWNhbGxzdWIgKnByb2Nlc3Nfc3RhdGljX3R1cGxlX2VsZW1lbnQKCWZyYW1lX2RpZyAtMSAvLyBldmVudENvbmZpZzogRXZlbnRDb25maWcKCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5Cglsb2FkIDI1NSAvLyBmdWxsIGFycmF5CglleHRyYWN0IDc4IDgKCWJ0b2kKCWl0b2IKCWNhbGxzdWIgKnByb2Nlc3Nfc3RhdGljX3R1cGxlX2VsZW1lbnQKCXBvcCAvLyBwb3AgaGVhZCBvZmZzZXQKCWNvbmNhdCAvLyBjb25jYXQgaGVhZCBhbmQgdGFpbAoJZnJhbWVfYnVyeSAwIC8vIG5ld0V2ZW50OiBFdmVudENvbmZpZwoKCS8vIGNvbnRyYWN0c1xUaWNrZXRNYW5hZ2VyLmFsZ28udHM6NTEKCS8vIHRoaXMuYWxsRXZlbnRzKHRoaXMubGFzdEV2ZW50SUQudmFsdWUpLnZhbHVlID0gbmV3RXZlbnQKCWJ5dGVjIDAgLy8gICJsYXN0RXZlbnRJRCIKCWFwcF9nbG9iYWxfZ2V0CglpdG9iCglkdXAKCWJveF9kZWwKCXBvcAoJZnJhbWVfZGlnIDAgLy8gbmV3RXZlbnQ6IEV2ZW50Q29uZmlnCglib3hfcHV0CgoJLy8gY29udHJhY3RzXFRpY2tldE1hbmFnZXIuYWxnby50czo1MgoJLy8gdGhpcy5sYXN0RXZlbnRJRC52YWx1ZSArPSAxCglieXRlYyAwIC8vICAibGFzdEV2ZW50SUQiCglhcHBfZ2xvYmFsX2dldAoJaW50YyAwIC8vIDEKCSsKCWJ5dGVjIDAgLy8gICJsYXN0RXZlbnRJRCIKCXN3YXAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzXFRpY2tldE1hbmFnZXIuYWxnby50czo1MwoJLy8gdGhpcy50b3RhbEV2ZW50cy52YWx1ZSArPSAxCglieXRlYyAxIC8vICAidG90YWxFdmVudHMiCglhcHBfZ2xvYmFsX2dldAoJaW50YyAwIC8vIDEKCSsKCWJ5dGVjIDEgLy8gICJ0b3RhbEV2ZW50cyIKCXN3YXAKCWFwcF9nbG9iYWxfcHV0CglyZXRzdWIKCi8vIGRlbGV0ZUV2ZW50KHVpbnQ2NCl2b2lkCiphYmlfcm91dGVfZGVsZXRlRXZlbnQ6CgkvLyBldmVudElEOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCgkvLyBleGVjdXRlIGRlbGV0ZUV2ZW50KHVpbnQ2NCl2b2lkCgljYWxsc3ViIGRlbGV0ZUV2ZW50CglpbnRjIDAgLy8gMQoJcmV0dXJuCgovLyBkZWxldGVFdmVudChldmVudElEOiB1aW50NjQpOiB2b2lkCmRlbGV0ZUV2ZW50OgoJcHJvdG8gMSAwCgoJLy8gY29udHJhY3RzXFRpY2tldE1hbmFnZXIuYWxnby50czo2MAoJLy8gYXNzZXJ0KHRoaXMudHhuLnNlbmRlciA9PSB0aGlzLmFwcC5jcmVhdG9yKQoJdHhuIFNlbmRlcgoJdHhuYSBBcHBsaWNhdGlvbnMgMAoJYXBwX3BhcmFtc19nZXQgQXBwQ3JlYXRvcgoJcG9wCgk9PQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXFRpY2tldE1hbmFnZXIuYWxnby50czo2MwoJLy8gdGhpcy5hbGxFdmVudHMoZXZlbnRJRCkuZGVsZXRlKCkKCWZyYW1lX2RpZyAtMSAvLyBldmVudElEOiB1aW50NjQKCWl0b2IKCWJveF9kZWwKCXJldHN1YgoKLy8gdXBkYXRlRXZlbnQoKXZvaWQKKmFiaV9yb3V0ZV91cGRhdGVFdmVudDoKCS8vIGV4ZWN1dGUgdXBkYXRlRXZlbnQoKXZvaWQKCWNhbGxzdWIgdXBkYXRlRXZlbnQKCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIHVwZGF0ZUV2ZW50KCk6IHZvaWQKdXBkYXRlRXZlbnQ6Cglwcm90byAwIDAKCXJldHN1YgoKKmNyZWF0ZV9Ob09wOgoJcHVzaGJ5dGVzIDB4ZDMyNGJlYTQgLy8gbWV0aG9kICJjcmVhdGVBcHBsaWNhdGlvbihhZGRyZXNzKXZvaWQiCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAwCgltYXRjaCAqYWJpX3JvdXRlX2NyZWF0ZUFwcGxpY2F0aW9uCgoJLy8gdGhpcyBjb250cmFjdCBkb2VzIG5vdCBpbXBsZW1lbnQgdGhlIGdpdmVuIEFCSSBtZXRob2QgZm9yIGNyZWF0ZSBOb09wCgllcnIKCipjYWxsX05vT3A6CglwdXNoYnl0ZXMgMHgzNDU0MjEyYyAvLyBtZXRob2QgImNyZWF0ZUV2ZW50KCh1aW50NjQsc3RyaW5nLHN0cmluZyxhZGRyZXNzLHVpbnQ2NCxzdHJpbmcsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0KSl2b2lkIgoJcHVzaGJ5dGVzIDB4YzI2ZTdlMTkgLy8gbWV0aG9kICJkZWxldGVFdmVudCh1aW50NjQpdm9pZCIKCXB1c2hieXRlcyAweDkwMWQ1NzhhIC8vIG1ldGhvZCAidXBkYXRlRXZlbnQoKXZvaWQiCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAwCgltYXRjaCAqYWJpX3JvdXRlX2NyZWF0ZUV2ZW50ICphYmlfcm91dGVfZGVsZXRlRXZlbnQgKmFiaV9yb3V0ZV91cGRhdGVFdmVudAoKCS8vIHRoaXMgY29udHJhY3QgZG9lcyBub3QgaW1wbGVtZW50IHRoZSBnaXZlbiBBQkkgbWV0aG9kIGZvciBjYWxsIE5vT3AKCWVycgoKKnByb2Nlc3Nfc3RhdGljX3R1cGxlX2VsZW1lbnQ6Cglwcm90byA0IDMKCWZyYW1lX2RpZyAtNCAvLyB0dXBsZSBoZWFkCglmcmFtZV9kaWcgLTEgLy8gZWxlbWVudAoJY29uY2F0CglmcmFtZV9kaWcgLTMgLy8gdHVwbGUgdGFpbAoJZnJhbWVfZGlnIC0yIC8vIGhlYWQgb2Zmc2V0CglyZXRzdWIKCipwcm9jZXNzX2R5bmFtaWNfdHVwbGVfZWxlbWVudDoKCXByb3RvIDQgMwoJZnJhbWVfZGlnIC00IC8vIHR1cGxlIGhlYWQKCWZyYW1lX2RpZyAtMiAvLyBoZWFkIG9mZnNldAoJY29uY2F0CglmcmFtZV9idXJ5IC00IC8vIHR1cGxlIGhlYWQKCWZyYW1lX2RpZyAtMSAvLyBlbGVtZW50CglkdXAKCWxlbgoJZnJhbWVfZGlnIC0yIC8vIGhlYWQgb2Zmc2V0CglidG9pCgkrCglpdG9iCglleHRyYWN0IDYgMgoJZnJhbWVfYnVyeSAtMiAvLyBoZWFkIG9mZnNldAoJZnJhbWVfZGlnIC0zIC8vIHR1cGxlIHRhaWwKCXN3YXAKCWNvbmNhdAoJZnJhbWVfYnVyeSAtMyAvLyB0dXBsZSB0YWlsCglmcmFtZV9kaWcgLTQgLy8gdHVwbGUgaGVhZAoJZnJhbWVfZGlnIC0zIC8vIHR1cGxlIHRhaWwKCWZyYW1lX2RpZyAtMiAvLyBoZWFkIG9mZnNldAoJcmV0c3Vi","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiACAQImAwtsYXN0RXZlbnRJRAt0b3RhbEV2ZW50cwAxGBSBBgsxGQiNDAFXAAAAAAAAAAAAAAFJAAAAAAAAAAAAAAA2GgFJFYEgEkSIAAIiQ4oBACmBAGeAEW1haW50YWluZXJBZGRyZXNzi/9nKCJniTYaAYgAAiJDigEAKioqgAIAVihkFogBLYv/Nf+BCDT/NP9PAllJNP9MWSILIwhYVwIASRUWVwYCTFCIARWL/zX/gQo0/zT/TwJZSTT/TFkiCyMIWFcCAEkVFlcGAkxQiADwi/81/zT/VwwgiADXi/81/zT/VywIFxaIAMmL/zX/gTQ0/zT/TwJZSTT/TFkiCyMIWFcCAEkVFlcGAkxQiACxi/81/zT/VzYIFxaIAJaL/zX/NP9XPggXFogAiIv/Nf80/1dGCBcWiAB6i/81/zT/V04IFxaIAGxIUIwAKGQWSbxIiwC/KGQiCChMZylkIggpTGeJNhoBF4gAAiJDigEAMQA2MgByB0gSRIv/FryJiAACIkOKAACJgATTJL6kNhoAjgH+qwCABDRUISyABMJufhmABJAdV4o2GgCOA/68/7H/zACKBAOL/Iv/UIv9i/6JigQDi/yL/lCM/Iv/SRWL/hcIFlcGAoz+i/1MUIz9i/yL/Yv+iQ==","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":3,"minor":27,"patch":0,"commitHash":"f54f0997"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type EventConfig = {
  eventId: bigint,
  eventName: string,
  eventCategory: string,
  eventCreator: string,
  maxParticipants: bigint,
  location: string,
  startTime: bigint,
  endTime: bigint,
  registeredCount: bigint,
  eventAppId: bigint
}


/**
 * Converts the ABI tuple representation of a EventConfig to the struct representation
 */
export function EventConfigFromTuple(abiTuple: [bigint, string, string, string, bigint, string, bigint, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.EventConfig, APP_SPEC.structs) as EventConfig
}

/**
 * The argument types for the TicketManager contract
 */
export type TicketManagerArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication(address)void': {
      maintainerAddress: string
    }
    'createEvent((uint64,string,string,address,uint64,string,uint64,uint64,uint64,uint64))void': {
      eventConfig: EventConfig
    }
    'deleteEvent(uint64)void': {
      eventId: bigint | number
    }
    'updateEvent()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication(address)void': [maintainerAddress: string]
    'createEvent((uint64,string,string,address,uint64,string,uint64,uint64,uint64,uint64))void': [eventConfig: EventConfig]
    'deleteEvent(uint64)void': [eventId: bigint | number]
    'updateEvent()void': []
  }
}

/**
 * The return type for each method
 */
export type TicketManagerReturns = {
  'createApplication(address)void': void
  'createEvent((uint64,string,string,address,uint64,string,uint64,uint64,uint64,uint64))void': void
  'deleteEvent(uint64)void': void
  'updateEvent()void': void
}

/**
 * Defines the types of available calls and state of the TicketManager smart contract.
 */
export type TicketManagerTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(address)void' | 'createApplication', {
      argsObj: TicketManagerArgs['obj']['createApplication(address)void']
      argsTuple: TicketManagerArgs['tuple']['createApplication(address)void']
      returns: TicketManagerReturns['createApplication(address)void']
    }>
    & Record<'createEvent((uint64,string,string,address,uint64,string,uint64,uint64,uint64,uint64))void' | 'createEvent', {
      argsObj: TicketManagerArgs['obj']['createEvent((uint64,string,string,address,uint64,string,uint64,uint64,uint64,uint64))void']
      argsTuple: TicketManagerArgs['tuple']['createEvent((uint64,string,string,address,uint64,string,uint64,uint64,uint64,uint64))void']
      returns: TicketManagerReturns['createEvent((uint64,string,string,address,uint64,string,uint64,uint64,uint64,uint64))void']
    }>
    & Record<'deleteEvent(uint64)void' | 'deleteEvent', {
      argsObj: TicketManagerArgs['obj']['deleteEvent(uint64)void']
      argsTuple: TicketManagerArgs['tuple']['deleteEvent(uint64)void']
      returns: TicketManagerReturns['deleteEvent(uint64)void']
    }>
    & Record<'updateEvent()void' | 'updateEvent', {
      argsObj: TicketManagerArgs['obj']['updateEvent()void']
      argsTuple: TicketManagerArgs['tuple']['updateEvent()void']
      returns: TicketManagerReturns['updateEvent()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        maintainerAddress: string
        totalEvents: bigint
        lastEventId: bigint
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        allEvents: Map<bigint | number, EventConfig>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type TicketManagerSignatures = keyof TicketManagerTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type TicketManagerNonVoidMethodSignatures = keyof TicketManagerTypes['methods'] extends infer T ? T extends keyof TicketManagerTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the TicketManager smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends TicketManagerSignatures> = TicketManagerTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the TicketManager smart contract to the method's return type
 */
export type MethodReturn<TSignature extends TicketManagerSignatures> = TicketManagerTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = TicketManagerTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = TicketManagerTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type TicketManagerCreateCallParams =
  | Expand<CallParams<TicketManagerArgs['obj']['createApplication(address)void'] | TicketManagerArgs['tuple']['createApplication(address)void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<TicketManagerArgs['obj']['createApplication(address)void'] | TicketManagerArgs['tuple']['createApplication(address)void']> & {method: 'createApplication(address)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type TicketManagerDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: TicketManagerCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the TicketManager smart contract
 */
export abstract class TicketManagerParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends TicketManagerCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication(address)void':
            return TicketManagerParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the TicketManager smart contract using the createApplication(address)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<TicketManagerArgs['obj']['createApplication(address)void'] | TicketManagerArgs['tuple']['createApplication(address)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication(address)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.maintainerAddress],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the createEvent((uint64,string,string,address,uint64,string,uint64,uint64,uint64,uint64))void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createEvent(params: CallParams<TicketManagerArgs['obj']['createEvent((uint64,string,string,address,uint64,string,uint64,uint64,uint64,uint64))void'] | TicketManagerArgs['tuple']['createEvent((uint64,string,string,address,uint64,string,uint64,uint64,uint64,uint64))void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'createEvent((uint64,string,string,address,uint64,string,uint64,uint64,uint64,uint64))void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.eventConfig],
    }
  }
  /**
   * Constructs a no op call for the deleteEvent(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static deleteEvent(params: CallParams<TicketManagerArgs['obj']['deleteEvent(uint64)void'] | TicketManagerArgs['tuple']['deleteEvent(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'deleteEvent(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.eventId],
    }
  }
  /**
   * Constructs a no op call for the updateEvent()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateEvent(params: CallParams<TicketManagerArgs['obj']['updateEvent()void'] | TicketManagerArgs['tuple']['updateEvent()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'updateEvent()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the TicketManager smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class TicketManagerFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `TicketManagerFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new TicketManagerClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new TicketManagerClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the TicketManager smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: TicketManagerDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? TicketManagerParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (TicketManagerCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new TicketManagerClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the TicketManager smart contract using the createApplication(address)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<TicketManagerArgs['obj']['createApplication(address)void'] | TicketManagerArgs['tuple']['createApplication(address)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(TicketManagerParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the TicketManager smart contract using the createApplication(address)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<TicketManagerArgs['obj']['createApplication(address)void'] | TicketManagerArgs['tuple']['createApplication(address)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(TicketManagerParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the TicketManager smart contract using an ABI method call using the createApplication(address)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<TicketManagerArgs['obj']['createApplication(address)void'] | TicketManagerArgs['tuple']['createApplication(address)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(TicketManagerParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | TicketManagerReturns['createApplication(address)void']) }, appClient: new TicketManagerClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the TicketManager smart contract
 */
export class TicketManagerClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `TicketManagerClient`
   *
   * @param appClient An `AppClient` instance which has been created with the TicketManager app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `TicketManagerClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends TicketManagerNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `TicketManagerClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<TicketManagerClient> {
    return new TicketManagerClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `TicketManagerClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<TicketManagerClient> {
    return new TicketManagerClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the TicketManager smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the TicketManager smart contract using the `createEvent((uint64,string,string,address,uint64,string,uint64,uint64,uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createEvent: (params: CallParams<TicketManagerArgs['obj']['createEvent((uint64,string,string,address,uint64,string,uint64,uint64,uint64,uint64))void'] | TicketManagerArgs['tuple']['createEvent((uint64,string,string,address,uint64,string,uint64,uint64,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TicketManagerParamsFactory.createEvent(params))
    },

    /**
     * Makes a call to the TicketManager smart contract using the `deleteEvent(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    deleteEvent: (params: CallParams<TicketManagerArgs['obj']['deleteEvent(uint64)void'] | TicketManagerArgs['tuple']['deleteEvent(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TicketManagerParamsFactory.deleteEvent(params))
    },

    /**
     * Makes a call to the TicketManager smart contract using the `updateEvent()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateEvent: (params: CallParams<TicketManagerArgs['obj']['updateEvent()void'] | TicketManagerArgs['tuple']['updateEvent()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(TicketManagerParamsFactory.updateEvent(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the TicketManager smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the TicketManager smart contract using the `createEvent((uint64,string,string,address,uint64,string,uint64,uint64,uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createEvent: (params: CallParams<TicketManagerArgs['obj']['createEvent((uint64,string,string,address,uint64,string,uint64,uint64,uint64,uint64))void'] | TicketManagerArgs['tuple']['createEvent((uint64,string,string,address,uint64,string,uint64,uint64,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TicketManagerParamsFactory.createEvent(params))
    },

    /**
     * Makes a call to the TicketManager smart contract using the `deleteEvent(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    deleteEvent: (params: CallParams<TicketManagerArgs['obj']['deleteEvent(uint64)void'] | TicketManagerArgs['tuple']['deleteEvent(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TicketManagerParamsFactory.deleteEvent(params))
    },

    /**
     * Makes a call to the TicketManager smart contract using the `updateEvent()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateEvent: (params: CallParams<TicketManagerArgs['obj']['updateEvent()void'] | TicketManagerArgs['tuple']['updateEvent()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(TicketManagerParamsFactory.updateEvent(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the TicketManager smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the TicketManager smart contract using the `createEvent((uint64,string,string,address,uint64,string,uint64,uint64,uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createEvent: async (params: CallParams<TicketManagerArgs['obj']['createEvent((uint64,string,string,address,uint64,string,uint64,uint64,uint64,uint64))void'] | TicketManagerArgs['tuple']['createEvent((uint64,string,string,address,uint64,string,uint64,uint64,uint64,uint64))void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TicketManagerParamsFactory.createEvent(params))
      return {...result, return: result.return as unknown as (undefined | TicketManagerReturns['createEvent((uint64,string,string,address,uint64,string,uint64,uint64,uint64,uint64))void'])}
    },

    /**
     * Makes a call to the TicketManager smart contract using the `deleteEvent(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    deleteEvent: async (params: CallParams<TicketManagerArgs['obj']['deleteEvent(uint64)void'] | TicketManagerArgs['tuple']['deleteEvent(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TicketManagerParamsFactory.deleteEvent(params))
      return {...result, return: result.return as unknown as (undefined | TicketManagerReturns['deleteEvent(uint64)void'])}
    },

    /**
     * Makes a call to the TicketManager smart contract using the `updateEvent()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateEvent: async (params: CallParams<TicketManagerArgs['obj']['updateEvent()void'] | TicketManagerArgs['tuple']['updateEvent()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(TicketManagerParamsFactory.updateEvent(params))
      return {...result, return: result.return as unknown as (undefined | TicketManagerReturns['updateEvent()void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new TicketManagerClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current TicketManager app
   */
  state = {
    /**
     * Methods to access global state for the current TicketManager app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          maintainerAddress: result.maintainerAddress,
          totalEvents: result.totalEvents,
          lastEventId: result.lastEventID,
        }
      },
      /**
       * Get the current value of the maintainerAddress key in global state
       */
      maintainerAddress: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("maintainerAddress")) as string | undefined },
      /**
       * Get the current value of the totalEvents key in global state
       */
      totalEvents: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalEvents")) as bigint | undefined },
      /**
       * Get the current value of the lastEventID key in global state
       */
      lastEventId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("lastEventID")) as bigint | undefined },
    },
    /**
     * Methods to access box state for the current TicketManager app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the allEvents map in box state
       */
      allEvents: {
        /**
         * Get all current values of the allEvents map in box state
         */
        getMap: async (): Promise<Map<bigint, EventConfig>> => { return (await this.appClient.state.box.getMap("allEvents")) as Map<bigint, EventConfig> },
        /**
         * Get a current value of the allEvents map by key from box state
         */
        value: async (key: bigint | number): Promise<EventConfig | undefined> => { return await this.appClient.state.box.getMapValue("allEvents", key) as EventConfig | undefined },
      },
    },
  }

  public newGroup(): TicketManagerComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a createEvent((uint64,string,string,address,uint64,string,uint64,uint64,uint64,uint64))void method call against the TicketManager contract
       */
      createEvent(params: CallParams<TicketManagerArgs['obj']['createEvent((uint64,string,string,address,uint64,string,uint64,uint64,uint64,uint64))void'] | TicketManagerArgs['tuple']['createEvent((uint64,string,string,address,uint64,string,uint64,uint64,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createEvent(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a deleteEvent(uint64)void method call against the TicketManager contract
       */
      deleteEvent(params: CallParams<TicketManagerArgs['obj']['deleteEvent(uint64)void'] | TicketManagerArgs['tuple']['deleteEvent(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.deleteEvent(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a updateEvent()void method call against the TicketManager contract
       */
      updateEvent(params: CallParams<TicketManagerArgs['obj']['updateEvent()void'] | TicketManagerArgs['tuple']['updateEvent()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateEvent(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the TicketManager contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as TicketManagerComposer
  }
}
export type TicketManagerComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the createEvent((uint64,string,string,address,uint64,string,uint64,uint64,uint64,uint64))void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createEvent(params?: CallParams<TicketManagerArgs['obj']['createEvent((uint64,string,string,address,uint64,string,uint64,uint64,uint64,uint64))void'] | TicketManagerArgs['tuple']['createEvent((uint64,string,string,address,uint64,string,uint64,uint64,uint64,uint64))void']>): TicketManagerComposer<[...TReturns, TicketManagerReturns['createEvent((uint64,string,string,address,uint64,string,uint64,uint64,uint64,uint64))void'] | undefined]>

  /**
   * Calls the deleteEvent(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  deleteEvent(params?: CallParams<TicketManagerArgs['obj']['deleteEvent(uint64)void'] | TicketManagerArgs['tuple']['deleteEvent(uint64)void']>): TicketManagerComposer<[...TReturns, TicketManagerReturns['deleteEvent(uint64)void'] | undefined]>

  /**
   * Calls the updateEvent()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateEvent(params?: CallParams<TicketManagerArgs['obj']['updateEvent()void'] | TicketManagerArgs['tuple']['updateEvent()void']>): TicketManagerComposer<[...TReturns, TicketManagerReturns['updateEvent()void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the TicketManager smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): TicketManagerComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): TicketManagerComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<TicketManagerComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<TicketManagerComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<TicketManagerComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<TicketManagerComposerResults<TReturns>>
}
export type TicketManagerComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

