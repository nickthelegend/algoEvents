/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'

export const APP_SPEC: Arc56Contract = {"name":"Ticket","desc":"","methods":[{"name":"createApplication","args":[{"name":"eventName","type":"string"},{"name":"location","type":"string"},{"name":"startTime","type":"uint64"},{"name":"endTime","type":"uint64"},{"name":"eventCost","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"createTickets","args":[{"name":"assetUrl","type":"string"},{"name":"totalTickets","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"registerEvent","args":[{"name":"email","type":"string"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"withDrawFunds","args":[{"name":"funds","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}}],"arcs":[4,56],"structs":{},"state":{"schema":{"global":{"bytes":3,"ints":6},"local":{"bytes":0,"ints":0}},"keys":{"global":{"creatorAddress":{"key":"Y3JlYXRvckFkZHJlc3M=","keyType":"AVMBytes","valueType":"address"},"eventName":{"key":"ZXZlbnROYW1l","keyType":"AVMBytes","valueType":"string"},"location":{"key":"bG9jYXRpb24=","keyType":"AVMBytes","valueType":"string"},"startTime":{"key":"c3RhcnRUaW1l","keyType":"AVMBytes","valueType":"uint64"},"endTime":{"key":"ZW5kVGltZQ==","keyType":"AVMBytes","valueType":"uint64"},"registeredCount":{"key":"cmVnaXN0ZXJlZENvdW50","keyType":"AVMBytes","valueType":"uint64"},"eventCost":{"key":"ZXZlbnRDb3N0","keyType":"AVMBytes","valueType":"uint64"},"assetID":{"key":"YXNzZXRJRA==","keyType":"AVMBytes","valueType":"uint64"},"ticketsRemaining":{"key":"dGlja2V0c1JlbWFpbmluZw==","keyType":"AVMBytes","valueType":"uint64"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"registeredMap":{"keyType":"address","valueType":"string"}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts\\Ticket.algo.ts:31","pc":[0]},{"teal":2,"source":"contracts\\Ticket.algo.ts:31","pc":[1,2,3,4]},{"teal":3,"source":"contracts\\Ticket.algo.ts:31","pc":[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58]},{"teal":15,"source":"contracts\\Ticket.algo.ts:31","pc":[59,60]},{"teal":16,"source":"contracts\\Ticket.algo.ts:31","pc":[61]},{"teal":17,"source":"contracts\\Ticket.algo.ts:31","pc":[62,63]},{"teal":18,"source":"contracts\\Ticket.algo.ts:31","pc":[64]},{"teal":19,"source":"contracts\\Ticket.algo.ts:31","pc":[65,66]},{"teal":20,"source":"contracts\\Ticket.algo.ts:31","pc":[67]},{"teal":21,"source":"contracts\\Ticket.algo.ts:31","pc":[68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93]},{"teal":25,"source":"contracts\\Ticket.algo.ts:31","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[94]},{"teal":30,"source":"contracts\\Ticket.algo.ts:48","pc":[95,96,97]},{"teal":31,"source":"contracts\\Ticket.algo.ts:48","pc":[98]},{"teal":34,"source":"contracts\\Ticket.algo.ts:48","pc":[99,100,101]},{"teal":35,"source":"contracts\\Ticket.algo.ts:48","pc":[102]},{"teal":38,"source":"contracts\\Ticket.algo.ts:48","pc":[103,104,105]},{"teal":39,"source":"contracts\\Ticket.algo.ts:48","pc":[106]},{"teal":42,"source":"contracts\\Ticket.algo.ts:48","pc":[107,108,109]},{"teal":43,"source":"contracts\\Ticket.algo.ts:48","pc":[110,111,112]},{"teal":46,"source":"contracts\\Ticket.algo.ts:48","pc":[113,114,115]},{"teal":47,"source":"contracts\\Ticket.algo.ts:48","pc":[116,117,118]},{"teal":50,"source":"contracts\\Ticket.algo.ts:48","pc":[119,120,121]},{"teal":51,"source":"contracts\\Ticket.algo.ts:48","pc":[122]},{"teal":52,"source":"contracts\\Ticket.algo.ts:48","pc":[123]},{"teal":56,"source":"contracts\\Ticket.algo.ts:48","pc":[124,125,126]},{"teal":60,"source":"contracts\\Ticket.algo.ts:50","pc":[127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142]},{"teal":61,"source":"contracts\\Ticket.algo.ts:50","pc":[143,144]},{"teal":62,"source":"contracts\\Ticket.algo.ts:50","pc":[145]},{"teal":66,"source":"contracts\\Ticket.algo.ts:51","pc":[146]},{"teal":67,"source":"contracts\\Ticket.algo.ts:51","pc":[147,148]},{"teal":68,"source":"contracts\\Ticket.algo.ts:51","pc":[149]},{"teal":69,"source":"contracts\\Ticket.algo.ts:51","pc":[150]},{"teal":70,"source":"contracts\\Ticket.algo.ts:51","pc":[151]},{"teal":71,"source":"contracts\\Ticket.algo.ts:51","pc":[152,153,154]},{"teal":72,"source":"contracts\\Ticket.algo.ts:51","pc":[155]},{"teal":73,"source":"contracts\\Ticket.algo.ts:51","pc":[156]},{"teal":74,"source":"contracts\\Ticket.algo.ts:51","pc":[157]},{"teal":78,"source":"contracts\\Ticket.algo.ts:52","pc":[158,159,160,161,162,163,164,165,166,167]},{"teal":79,"source":"contracts\\Ticket.algo.ts:52","pc":[168,169]},{"teal":80,"source":"contracts\\Ticket.algo.ts:52","pc":[170]},{"teal":81,"source":"contracts\\Ticket.algo.ts:52","pc":[171]},{"teal":82,"source":"contracts\\Ticket.algo.ts:52","pc":[172]},{"teal":83,"source":"contracts\\Ticket.algo.ts:52","pc":[173,174,175]},{"teal":84,"source":"contracts\\Ticket.algo.ts:52","pc":[176]},{"teal":85,"source":"contracts\\Ticket.algo.ts:52","pc":[177]},{"teal":86,"source":"contracts\\Ticket.algo.ts:52","pc":[178]},{"teal":90,"source":"contracts\\Ticket.algo.ts:53","pc":[179,180,181,182,183,184,185,186,187]},{"teal":91,"source":"contracts\\Ticket.algo.ts:53","pc":[188,189]},{"teal":92,"source":"contracts\\Ticket.algo.ts:53","pc":[190]},{"teal":96,"source":"contracts\\Ticket.algo.ts:54","pc":[191]},{"teal":97,"source":"contracts\\Ticket.algo.ts:54","pc":[192]},{"teal":98,"source":"contracts\\Ticket.algo.ts:54","pc":[193]},{"teal":102,"source":"contracts\\Ticket.algo.ts:55","pc":[194,195,196,197,198,199,200,201,202,203,204]},{"teal":103,"source":"contracts\\Ticket.algo.ts:55","pc":[205,206]},{"teal":104,"source":"contracts\\Ticket.algo.ts:55","pc":[207]},{"teal":108,"source":"contracts\\Ticket.algo.ts:56","pc":[208,209,210,211,212,213,214,215,216,217,218]},{"teal":109,"source":"contracts\\Ticket.algo.ts:56","pc":[219,220]},{"teal":110,"source":"contracts\\Ticket.algo.ts:56","pc":[221]},{"teal":114,"source":"contracts\\Ticket.algo.ts:57","pc":[222]},{"teal":115,"source":"contracts\\Ticket.algo.ts:57","pc":[223]},{"teal":116,"source":"contracts\\Ticket.algo.ts:57","pc":[224]},{"teal":117,"source":"contracts\\Ticket.algo.ts:57","pc":[225]},{"teal":118,"source":"contracts\\Ticket.algo.ts:48","pc":[226]},{"teal":123,"source":"contracts\\Ticket.algo.ts:65","pc":[227,228,229]},{"teal":124,"source":"contracts\\Ticket.algo.ts:65","pc":[230]},{"teal":127,"source":"contracts\\Ticket.algo.ts:65","pc":[231,232,233]},{"teal":128,"source":"contracts\\Ticket.algo.ts:65","pc":[234,235,236]},{"teal":131,"source":"contracts\\Ticket.algo.ts:65","pc":[237,238,239]},{"teal":132,"source":"contracts\\Ticket.algo.ts:65","pc":[240]},{"teal":133,"source":"contracts\\Ticket.algo.ts:65","pc":[241]},{"teal":137,"source":"contracts\\Ticket.algo.ts:65","pc":[242,243,244]},{"teal":140,"source":"contracts\\Ticket.algo.ts:65","pc":[245,246]},{"teal":144,"source":"contracts\\Ticket.algo.ts:67","pc":[247,248]},{"teal":145,"source":"contracts\\Ticket.algo.ts:67","pc":[249,250,251]},{"teal":146,"source":"contracts\\Ticket.algo.ts:67","pc":[252,253]},{"teal":147,"source":"contracts\\Ticket.algo.ts:67","pc":[254]},{"teal":148,"source":"contracts\\Ticket.algo.ts:67","pc":[255]},{"teal":151,"source":"contracts\\Ticket.algo.ts:67","errorMessage":"Only The Event Creator can Mint Tickets","pc":[256]},{"teal":166,"source":"contracts\\Ticket.algo.ts:70","pc":[257]},{"teal":167,"source":"contracts\\Ticket.algo.ts:70","pc":[258,259]},{"teal":168,"source":"contracts\\Ticket.algo.ts:70","pc":[260,261]},{"teal":172,"source":"contracts\\Ticket.algo.ts:71","pc":[262,263]},{"teal":173,"source":"contracts\\Ticket.algo.ts:71","pc":[264,265]},{"teal":177,"source":"contracts\\Ticket.algo.ts:72","pc":[266]},{"teal":178,"source":"contracts\\Ticket.algo.ts:72","pc":[267,268]},{"teal":182,"source":"contracts\\Ticket.algo.ts:73","pc":[269,270,271,272,273,274]},{"teal":183,"source":"contracts\\Ticket.algo.ts:73","pc":[275,276]},{"teal":187,"source":"contracts\\Ticket.algo.ts:74","pc":[277]},{"teal":188,"source":"contracts\\Ticket.algo.ts:74","pc":[278]},{"teal":189,"source":"contracts\\Ticket.algo.ts:74","pc":[279,280,281]},{"teal":190,"source":"contracts\\Ticket.algo.ts:74","pc":[282,283]},{"teal":194,"source":"contracts\\Ticket.algo.ts:75","pc":[284,285]},{"teal":195,"source":"contracts\\Ticket.algo.ts:75","pc":[286,287]},{"teal":199,"source":"contracts\\Ticket.algo.ts:76","pc":[288,289,290]},{"teal":200,"source":"contracts\\Ticket.algo.ts:76","pc":[291,292]},{"teal":203,"source":"contracts\\Ticket.algo.ts:70","pc":[293]},{"teal":204,"source":"contracts\\Ticket.algo.ts:70","pc":[294,295]},{"teal":205,"source":"contracts\\Ticket.algo.ts:70","pc":[296,297]},{"teal":209,"source":"contracts\\Ticket.algo.ts:83","pc":[298]},{"teal":210,"source":"contracts\\Ticket.algo.ts:83","pc":[299,300]},{"teal":211,"source":"contracts\\Ticket.algo.ts:83","pc":[301]},{"teal":212,"source":"contracts\\Ticket.algo.ts:65","pc":[302]},{"teal":217,"source":"contracts\\Ticket.algo.ts:91","pc":[303,304,305]},{"teal":218,"source":"contracts\\Ticket.algo.ts:91","pc":[306,307,308]},{"teal":221,"source":"contracts\\Ticket.algo.ts:91","pc":[309,310,311]},{"teal":222,"source":"contracts\\Ticket.algo.ts:91","pc":[312]},{"teal":223,"source":"contracts\\Ticket.algo.ts:91","pc":[313]},{"teal":227,"source":"contracts\\Ticket.algo.ts:91","pc":[314,315,316]},{"teal":231,"source":"contracts\\Ticket.algo.ts:94","pc":[317,318]},{"teal":232,"source":"contracts\\Ticket.algo.ts:94","pc":[319]},{"teal":233,"source":"contracts\\Ticket.algo.ts:94","pc":[320]},{"teal":234,"source":"contracts\\Ticket.algo.ts:94","pc":[321]},{"teal":235,"source":"contracts\\Ticket.algo.ts:94","pc":[322]},{"teal":238,"source":"contracts\\Ticket.algo.ts:94","errorMessage":"already claimed","pc":[323]},{"teal":242,"source":"contracts\\Ticket.algo.ts:95","pc":[324]},{"teal":243,"source":"contracts\\Ticket.algo.ts:95","pc":[325]},{"teal":244,"source":"contracts\\Ticket.algo.ts:95","pc":[326]},{"teal":245,"source":"contracts\\Ticket.algo.ts:95","pc":[327]},{"teal":246,"source":"contracts\\Ticket.algo.ts:95","pc":[328]},{"teal":247,"source":"contracts\\Ticket.algo.ts:95","pc":[329]},{"teal":248,"source":"contracts\\Ticket.algo.ts:95","pc":[330]},{"teal":252,"source":"contracts\\Ticket.algo.ts:96","pc":[331,332]},{"teal":253,"source":"contracts\\Ticket.algo.ts:96","pc":[333]},{"teal":254,"source":"contracts\\Ticket.algo.ts:96","pc":[334]},{"teal":255,"source":"contracts\\Ticket.algo.ts:96","pc":[335]},{"teal":256,"source":"contracts\\Ticket.algo.ts:96","pc":[336,337]},{"teal":257,"source":"contracts\\Ticket.algo.ts:96","pc":[338]},{"teal":258,"source":"contracts\\Ticket.algo.ts:96","pc":[339]},{"teal":259,"source":"contracts\\Ticket.algo.ts:96","pc":[340]},{"teal":260,"source":"contracts\\Ticket.algo.ts:96","pc":[341,342,343]},{"teal":261,"source":"contracts\\Ticket.algo.ts:96","pc":[344]},{"teal":262,"source":"contracts\\Ticket.algo.ts:96","pc":[345]},{"teal":263,"source":"contracts\\Ticket.algo.ts:96","pc":[346]},{"teal":267,"source":"contracts\\Ticket.algo.ts:101","pc":[347,348]},{"teal":268,"source":"contracts\\Ticket.algo.ts:101","pc":[349]},{"teal":269,"source":"contracts\\Ticket.algo.ts:101","pc":[350,351,352]},{"teal":270,"source":"contracts\\Ticket.algo.ts:91","pc":[353]},{"teal":275,"source":"contracts\\Ticket.algo.ts:109","pc":[354,355,356]},{"teal":276,"source":"contracts\\Ticket.algo.ts:109","pc":[357]},{"teal":279,"source":"contracts\\Ticket.algo.ts:109","pc":[358,359,360]},{"teal":280,"source":"contracts\\Ticket.algo.ts:109","pc":[361]},{"teal":281,"source":"contracts\\Ticket.algo.ts:109","pc":[362]},{"teal":285,"source":"contracts\\Ticket.algo.ts:109","pc":[363,364,365]},{"teal":289,"source":"contracts\\Ticket.algo.ts:112","pc":[366]},{"teal":290,"source":"contracts\\Ticket.algo.ts:112","pc":[367]},{"teal":291,"source":"contracts\\Ticket.algo.ts:112","pc":[368,369]},{"teal":295,"source":"contracts\\Ticket.algo.ts:112","pc":[370,371]},{"teal":296,"source":"contracts\\Ticket.algo.ts:112","pc":[372,373]},{"teal":300,"source":"contracts\\Ticket.algo.ts:112","pc":[374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411]},{"teal":301,"source":"contracts\\Ticket.algo.ts:112","pc":[412,413]},{"teal":304,"source":"contracts\\Ticket.algo.ts:112","pc":[414]},{"teal":305,"source":"contracts\\Ticket.algo.ts:112","pc":[415,416]},{"teal":308,"source":"contracts\\Ticket.algo.ts:112","pc":[417]},{"teal":309,"source":"contracts\\Ticket.algo.ts:109","pc":[418]},{"teal":321,"source":"contracts\\Ticket.algo.ts:131","pc":[419,420,421]},{"teal":324,"source":"contracts\\Ticket.algo.ts:131","pc":[422,423]},{"teal":332,"source":"contracts\\Ticket.algo.ts:132","pc":[424]},{"teal":333,"source":"contracts\\Ticket.algo.ts:132","pc":[425,426]},{"teal":334,"source":"contracts\\Ticket.algo.ts:132","pc":[427,428]},{"teal":338,"source":"contracts\\Ticket.algo.ts:133","pc":[429]},{"teal":339,"source":"contracts\\Ticket.algo.ts:133","pc":[430]},{"teal":340,"source":"contracts\\Ticket.algo.ts:133","pc":[431,432]},{"teal":344,"source":"contracts\\Ticket.algo.ts:134","pc":[433,434]},{"teal":345,"source":"contracts\\Ticket.algo.ts:134","pc":[435,436]},{"teal":349,"source":"contracts\\Ticket.algo.ts:135","pc":[437,438]},{"teal":350,"source":"contracts\\Ticket.algo.ts:135","pc":[439,440]},{"teal":353,"source":"contracts\\Ticket.algo.ts:132","pc":[441]},{"teal":354,"source":"contracts\\Ticket.algo.ts:132","pc":[442,443]},{"teal":357,"source":"contracts\\Ticket.algo.ts:132","pc":[444]},{"teal":361,"source":"contracts\\Ticket.algo.ts:139","pc":[445]},{"teal":362,"source":"contracts\\Ticket.algo.ts:139","pc":[446]},{"teal":363,"source":"contracts\\Ticket.algo.ts:139","pc":[447,448]},{"teal":364,"source":"contracts\\Ticket.algo.ts:139","pc":[449]},{"teal":365,"source":"contracts\\Ticket.algo.ts:139","pc":[450,451]},{"teal":369,"source":"contracts\\Ticket.algo.ts:141","pc":[452,453]},{"teal":372,"source":"contracts\\Ticket.algo.ts:131","pc":[454,455]},{"teal":373,"source":"contracts\\Ticket.algo.ts:131","pc":[456]},{"teal":376,"source":"contracts\\Ticket.algo.ts:31","pc":[457,458,459,460,461,462]},{"teal":377,"source":"contracts\\Ticket.algo.ts:31","pc":[463,464,465]},{"teal":378,"source":"contracts\\Ticket.algo.ts:31","pc":[466,467,468,469]},{"teal":381,"source":"contracts\\Ticket.algo.ts:31","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[470]},{"teal":384,"source":"contracts\\Ticket.algo.ts:31","pc":[471,472,473,474,475,476]},{"teal":385,"source":"contracts\\Ticket.algo.ts:31","pc":[477,478,479,480,481,482]},{"teal":386,"source":"contracts\\Ticket.algo.ts:31","pc":[483,484,485,486,487,488]},{"teal":387,"source":"contracts\\Ticket.algo.ts:31","pc":[489,490,491]},{"teal":388,"source":"contracts\\Ticket.algo.ts:31","pc":[492,493,494,495,496,497,498,499]},{"teal":391,"source":"contracts\\Ticket.algo.ts:31","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[500]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDEwCmludGNibG9jayAxIDAKYnl0ZWNibG9jayAweDcyNjU2NzY5NzM3NDY1NzI2NTY0NDM2Zjc1NmU3NCAweDc0Njk2MzZiNjU3NDczNTI2NTZkNjE2OTZlNjk2ZTY3IDB4NjU3NjY1NmU3NDRlNjE2ZDY1IDB4NjE3MzczNjU3NDQ5NDQgMHgKCi8vIFRoaXMgVEVBTCB3YXMgZ2VuZXJhdGVkIGJ5IFRFQUxTY3JpcHQgdjAuMTA2LjMKLy8gaHR0cHM6Ly9naXRodWIuY29tL2FsZ29yYW5kZm91bmRhdGlvbi9URUFMU2NyaXB0CgovLyBUaGlzIGNvbnRyYWN0IGlzIGNvbXBsaWFudCB3aXRoIGFuZC9vciBpbXBsZW1lbnRzIHRoZSBmb2xsb3dpbmcgQVJDczogWyBBUkM0IF0KCi8vIFRoZSBmb2xsb3dpbmcgdGVuIGxpbmVzIG9mIFRFQUwgaGFuZGxlIGluaXRpYWwgcHJvZ3JhbSBmbG93Ci8vIFRoaXMgcGF0dGVybiBpcyB1c2VkIHRvIG1ha2UgaXQgZWFzeSBmb3IgYW55b25lIHRvIHBhcnNlIHRoZSBzdGFydCBvZiB0aGUgcHJvZ3JhbSBhbmQgZGV0ZXJtaW5lIGlmIGEgc3BlY2lmaWMgYWN0aW9uIGlzIGFsbG93ZWQKLy8gSGVyZSwgYWN0aW9uIHJlZmVycyB0byB0aGUgT25Db21wbGV0ZSBpbiBjb21iaW5hdGlvbiB3aXRoIHdoZXRoZXIgdGhlIGFwcCBpcyBiZWluZyBjcmVhdGVkIG9yIGNhbGxlZAovLyBFdmVyeSBwb3NzaWJsZSBhY3Rpb24gZm9yIHRoaXMgY29udHJhY3QgaXMgcmVwcmVzZW50ZWQgaW4gdGhlIHN3aXRjaCBzdGF0ZW1lbnQKLy8gSWYgdGhlIGFjdGlvbiBpcyBub3QgaW1wbGVtZW50ZWQgaW4gdGhlIGNvbnRyYWN0LCBpdHMgcmVzcGVjdGl2ZSBicmFuY2ggd2lsbCBiZSAiKk5PVF9JTVBMRU1FTlRFRCIgd2hpY2gganVzdCBjb250YWlucyAiZXJyIgp0eG4gQXBwbGljYXRpb25JRAohCnB1c2hpbnQgNgoqCnR4biBPbkNvbXBsZXRpb24KKwpzd2l0Y2ggKmNhbGxfTm9PcCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKmNyZWF0ZV9Ob09wICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRAoKKk5PVF9JTVBMRU1FTlRFRDoKCS8vIFRoZSByZXF1ZXN0ZWQgYWN0aW9uIGlzIG5vdCBpbXBsZW1lbnRlZCBpbiB0aGlzIGNvbnRyYWN0LiBBcmUgeW91IHVzaW5nIHRoZSBjb3JyZWN0IE9uQ29tcGxldGU/IERpZCB5b3Ugc2V0IHlvdXIgYXBwIElEPwoJZXJyCgovLyBjcmVhdGVBcHBsaWNhdGlvbihzdHJpbmcsc3RyaW5nLHVpbnQ2NCx1aW50NjQsdWludDY0KXZvaWQKKmFiaV9yb3V0ZV9jcmVhdGVBcHBsaWNhdGlvbjoKCS8vIGV2ZW50Q29zdDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyA1CglidG9pCgoJLy8gZW5kVGltZTogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyA0CglidG9pCgoJLy8gc3RhcnRUaW1lOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDMKCWJ0b2kKCgkvLyBsb2NhdGlvbjogc3RyaW5nCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglleHRyYWN0IDIgMAoKCS8vIGV2ZW50TmFtZTogc3RyaW5nCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglleHRyYWN0IDIgMAoKCS8vIGV4ZWN1dGUgY3JlYXRlQXBwbGljYXRpb24oc3RyaW5nLHN0cmluZyx1aW50NjQsdWludDY0LHVpbnQ2NCl2b2lkCgljYWxsc3ViIGNyZWF0ZUFwcGxpY2F0aW9uCglpbnRjIDAgLy8gMQoJcmV0dXJuCgovLyBjcmVhdGVBcHBsaWNhdGlvbihldmVudE5hbWU6IHN0cmluZywgbG9jYXRpb246IHN0cmluZywgc3RhcnRUaW1lOiB1aW50NjQsIGVuZFRpbWU6IHVpbnQ2NCwgZXZlbnRDb3N0OiB1aW50NjQpOiB2b2lkCmNyZWF0ZUFwcGxpY2F0aW9uOgoJcHJvdG8gNSAwCgoJLy8gY29udHJhY3RzXFRpY2tldC5hbGdvLnRzOjUwCgkvLyB0aGlzLmNyZWF0b3JBZGRyZXNzLnZhbHVlID0gdGhpcy50eG4uc2VuZGVyCglwdXNoYnl0ZXMgMHg2MzcyNjU2MTc0NmY3MjQxNjQ2NDcyNjU3MzczIC8vICJjcmVhdG9yQWRkcmVzcyIKCXR4biBTZW5kZXIKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzXFRpY2tldC5hbGdvLnRzOjUxCgkvLyB0aGlzLmV2ZW50TmFtZS52YWx1ZSA9IGV2ZW50TmFtZQoJYnl0ZWMgMiAvLyAgImV2ZW50TmFtZSIKCWZyYW1lX2RpZyAtMSAvLyBldmVudE5hbWU6IHN0cmluZwoJZHVwCglsZW4KCWl0b2IKCWV4dHJhY3QgNiAyCglzd2FwCgljb25jYXQKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzXFRpY2tldC5hbGdvLnRzOjUyCgkvLyB0aGlzLmxvY2F0aW9uLnZhbHVlID0gbG9jYXRpb24KCXB1c2hieXRlcyAweDZjNmY2MzYxNzQ2OTZmNmUgLy8gImxvY2F0aW9uIgoJZnJhbWVfZGlnIC0yIC8vIGxvY2F0aW9uOiBzdHJpbmcKCWR1cAoJbGVuCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0CglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0c1xUaWNrZXQuYWxnby50czo1MwoJLy8gdGhpcy5lbmRUaW1lLnZhbHVlID0gZW5kVGltZQoJcHVzaGJ5dGVzIDB4NjU2ZTY0NTQ2OTZkNjUgLy8gImVuZFRpbWUiCglmcmFtZV9kaWcgLTQgLy8gZW5kVGltZTogdWludDY0CglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0c1xUaWNrZXQuYWxnby50czo1NAoJLy8gdGhpcy5yZWdpc3RlcmVkQ291bnQudmFsdWUgPSAwCglieXRlYyAwIC8vICAicmVnaXN0ZXJlZENvdW50IgoJaW50YyAxIC8vIDAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzXFRpY2tldC5hbGdvLnRzOjU1CgkvLyB0aGlzLnN0YXJ0VGltZS52YWx1ZSA9IHN0YXJ0VGltZQoJcHVzaGJ5dGVzIDB4NzM3NDYxNzI3NDU0Njk2ZDY1IC8vICJzdGFydFRpbWUiCglmcmFtZV9kaWcgLTMgLy8gc3RhcnRUaW1lOiB1aW50NjQKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzXFRpY2tldC5hbGdvLnRzOjU2CgkvLyB0aGlzLmV2ZW50Q29zdC52YWx1ZSA9IGV2ZW50Q29zdAoJcHVzaGJ5dGVzIDB4NjU3NjY1NmU3NDQzNmY3Mzc0IC8vICJldmVudENvc3QiCglmcmFtZV9kaWcgLTUgLy8gZXZlbnRDb3N0OiB1aW50NjQKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzXFRpY2tldC5hbGdvLnRzOjU3CgkvLyB0aGlzLnRpY2tldHNSZW1haW5pbmcudmFsdWUgPSB0aGlzLnJlZ2lzdGVyZWRDb3VudC52YWx1ZQoJYnl0ZWMgMSAvLyAgInRpY2tldHNSZW1haW5pbmciCglieXRlYyAwIC8vICAicmVnaXN0ZXJlZENvdW50IgoJYXBwX2dsb2JhbF9nZXQKCWFwcF9nbG9iYWxfcHV0CglyZXRzdWIKCi8vIGNyZWF0ZVRpY2tldHMoc3RyaW5nLHVpbnQ2NCl2b2lkCiphYmlfcm91dGVfY3JlYXRlVGlja2V0czoKCS8vIHRvdGFsVGlja2V0czogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglidG9pCgoJLy8gYXNzZXRVcmw6IHN0cmluZwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZXh0cmFjdCAyIDAKCgkvLyBleGVjdXRlIGNyZWF0ZVRpY2tldHMoc3RyaW5nLHVpbnQ2NCl2b2lkCgljYWxsc3ViIGNyZWF0ZVRpY2tldHMKCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIGNyZWF0ZVRpY2tldHMoYXNzZXRVcmwgOiBzdHJpbmcsIHRvdGFsVGlja2V0czogdWludDY0KTogdm9pZApjcmVhdGVUaWNrZXRzOgoJcHJvdG8gMiAwCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGVjIDQgLy8gMHgKCgkvLyBjb250cmFjdHNcVGlja2V0LmFsZ28udHM6NjcKCS8vIGFzc2VydCh0aGlzLnR4bi5zZW5kZXIgPT0gdGhpcy5hcHAuY3JlYXRvciwgIk9ubHkgVGhlIEV2ZW50IENyZWF0b3IgY2FuIE1pbnQgVGlja2V0cyIpCgl0eG4gU2VuZGVyCgl0eG5hIEFwcGxpY2F0aW9ucyAwCglhcHBfcGFyYW1zX2dldCBBcHBDcmVhdG9yCglwb3AKCT09CgoJLy8gT25seSBUaGUgRXZlbnQgQ3JlYXRvciBjYW4gTWludCBUaWNrZXRzCglhc3NlcnQKCgkvLyBjb250cmFjdHNcVGlja2V0LmFsZ28udHM6NzAKCS8vIGl0eG5SZXN1bHQgPSBzZW5kQXNzZXRDcmVhdGlvbih7CgkvLyAgICAgICAgICAgICBjb25maWdBc3NldFRvdGFsOiB0b3RhbFRpY2tldHMsICAvLyBVc2UgY29uZmlnQXNzZXRUb3RhbCBpbnN0ZWFkIG9mIHRvdGFsCgkvLyAgICAgICAgICAgICBjb25maWdBc3NldERlY2ltYWxzOiAwLCAgICAgIC8vIFVzZSBjb25maWdBc3NldERlY2ltYWxzIGluc3RlYWQgb2YgZGVjaW1hbHMKCS8vICAgICAgICAgICAgIGNvbmZpZ0Fzc2V0VW5pdE5hbWU6ICJUQ0tUIiwgIC8vIFVzZSBjb25maWdBc3NldFVuaXROYW1lIGluc3RlYWQgb2YgdW5pdE5hbWUKCS8vICAgICAgICAgICAgIGNvbmZpZ0Fzc2V0TmFtZTogdGhpcy5ldmVudE5hbWUudmFsdWUsIC8vIFVzZSBjb25maWdBc3NldE5hbWUgaW5zdGVhZCBvZiBhc3NldE5hbWUKCS8vICAgICAgICAgICAgIGNvbmZpZ0Fzc2V0VVJMIDogYXNzZXRVcmwsCgkvLyAgICAgICAgICAgICBmZWU6IDMwMDAsCgkvLwoJLy8KCS8vCgkvLwoJLy8gICAgICAgfSkKCWl0eG5fYmVnaW4KCXB1c2hpbnQgMyAvLyBhY2ZnCglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gY29udHJhY3RzXFRpY2tldC5hbGdvLnRzOjcxCgkvLyBjb25maWdBc3NldFRvdGFsOiB0b3RhbFRpY2tldHMKCWZyYW1lX2RpZyAtMiAvLyB0b3RhbFRpY2tldHM6IHVpbnQ2NAoJaXR4bl9maWVsZCBDb25maWdBc3NldFRvdGFsCgoJLy8gY29udHJhY3RzXFRpY2tldC5hbGdvLnRzOjcyCgkvLyBjb25maWdBc3NldERlY2ltYWxzOiAwCglpbnRjIDEgLy8gMAoJaXR4bl9maWVsZCBDb25maWdBc3NldERlY2ltYWxzCgoJLy8gY29udHJhY3RzXFRpY2tldC5hbGdvLnRzOjczCgkvLyBjb25maWdBc3NldFVuaXROYW1lOiAiVENLVCIKCXB1c2hieXRlcyAweDU0NDM0YjU0IC8vICJUQ0tUIgoJaXR4bl9maWVsZCBDb25maWdBc3NldFVuaXROYW1lCgoJLy8gY29udHJhY3RzXFRpY2tldC5hbGdvLnRzOjc0CgkvLyBjb25maWdBc3NldE5hbWU6IHRoaXMuZXZlbnROYW1lLnZhbHVlCglieXRlYyAyIC8vICAiZXZlbnROYW1lIgoJYXBwX2dsb2JhbF9nZXQKCWV4dHJhY3QgMiAwCglpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0TmFtZQoKCS8vIGNvbnRyYWN0c1xUaWNrZXQuYWxnby50czo3NQoJLy8gY29uZmlnQXNzZXRVUkwgOiBhc3NldFVybAoJZnJhbWVfZGlnIC0xIC8vIGFzc2V0VXJsOiBzdHJpbmcKCWl0eG5fZmllbGQgQ29uZmlnQXNzZXRVUkwKCgkvLyBjb250cmFjdHNcVGlja2V0LmFsZ28udHM6NzYKCS8vIGZlZTogMzAwMAoJcHVzaGludCAzMDAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCWl0eG4gQ3JlYXRlZEFzc2V0SUQKCWZyYW1lX2J1cnkgMCAvLyBpdHhuUmVzdWx0OiB1aW50NjQKCgkvLyBjb250cmFjdHNcVGlja2V0LmFsZ28udHM6ODMKCS8vIHRoaXMuYXNzZXRJRC52YWx1ZSA9IGl0eG5SZXN1bHQuaWQKCWJ5dGVjIDMgLy8gICJhc3NldElEIgoJZnJhbWVfZGlnIDAgLy8gaXR4blJlc3VsdDogdWludDY0CglhcHBfZ2xvYmFsX3B1dAoJcmV0c3ViCgovLyByZWdpc3RlckV2ZW50KHN0cmluZyl2b2lkCiphYmlfcm91dGVfcmVnaXN0ZXJFdmVudDoKCS8vIGVtYWlsOiBzdHJpbmcKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWV4dHJhY3QgMiAwCgoJLy8gZXhlY3V0ZSByZWdpc3RlckV2ZW50KHN0cmluZyl2b2lkCgljYWxsc3ViIHJlZ2lzdGVyRXZlbnQKCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIHJlZ2lzdGVyRXZlbnQoZW1haWw6IHN0cmluZyk6IHZvaWQKcmVnaXN0ZXJFdmVudDoKCXByb3RvIDEgMAoKCS8vIGNvbnRyYWN0c1xUaWNrZXQuYWxnby50czo5NAoJLy8gYXNzZXJ0KCF0aGlzLnJlZ2lzdGVyZWRNYXAodGhpcy50eG4uc2VuZGVyKS5leGlzdHMsICdhbHJlYWR5IGNsYWltZWQnKQoJdHhuIFNlbmRlcgoJYm94X2xlbgoJc3dhcAoJcG9wCgkhCgoJLy8gYWxyZWFkeSBjbGFpbWVkCglhc3NlcnQKCgkvLyBjb250cmFjdHNcVGlja2V0LmFsZ28udHM6OTUKCS8vIHRoaXMucmVnaXN0ZXJlZENvdW50LnZhbHVlICs9IDEKCWJ5dGVjIDAgLy8gICJyZWdpc3RlcmVkQ291bnQiCglhcHBfZ2xvYmFsX2dldAoJaW50YyAwIC8vIDEKCSsKCWJ5dGVjIDAgLy8gICJyZWdpc3RlcmVkQ291bnQiCglzd2FwCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0c1xUaWNrZXQuYWxnby50czo5NgoJLy8gdGhpcy5yZWdpc3RlcmVkTWFwKHRoaXMudHhuLnNlbmRlcikudmFsdWUgPSBlbWFpbAoJdHhuIFNlbmRlcgoJZHVwCglib3hfZGVsCglwb3AKCWZyYW1lX2RpZyAtMSAvLyBlbWFpbDogc3RyaW5nCglkdXAKCWxlbgoJaXRvYgoJZXh0cmFjdCA2IDIKCXN3YXAKCWNvbmNhdAoJYm94X3B1dAoKCS8vIGNvbnRyYWN0c1xUaWNrZXQuYWxnby50czoxMDEKCS8vIHRoaXMuc2VuZFRpY2tldHMoMSx0aGlzLnR4bi5zZW5kZXIpCgl0eG4gU2VuZGVyCglpbnRjIDAgLy8gMQoJY2FsbHN1YiBzZW5kVGlja2V0cwoJcmV0c3ViCgovLyB3aXRoRHJhd0Z1bmRzKHVpbnQ2NCl2b2lkCiphYmlfcm91dGVfd2l0aERyYXdGdW5kczoKCS8vIGZ1bmRzOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCgkvLyBleGVjdXRlIHdpdGhEcmF3RnVuZHModWludDY0KXZvaWQKCWNhbGxzdWIgd2l0aERyYXdGdW5kcwoJaW50YyAwIC8vIDEKCXJldHVybgoKLy8gd2l0aERyYXdGdW5kcyhmdW5kcyA6IHVpbnQ2NCk6IHZvaWQKd2l0aERyYXdGdW5kczoKCXByb3RvIDEgMAoKCS8vIGNvbnRyYWN0c1xUaWNrZXQuYWxnby50czoxMTIKCS8vIHNlbmRQYXltZW50KHthbW91bnQ6IGZ1bmRzLG5vdGU6ICJXaXRoZHJhd24gRnVuZHMgZnJvbSBUaWNrZXQgQ29udHJhY3QifSkKCWl0eG5fYmVnaW4KCWludGMgMCAvLyAgcGF5CglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gY29udHJhY3RzXFRpY2tldC5hbGdvLnRzOjExMgoJLy8gYW1vdW50OiBmdW5kcwoJZnJhbWVfZGlnIC0xIC8vIGZ1bmRzOiB1aW50NjQKCWl0eG5fZmllbGQgQW1vdW50CgoJLy8gY29udHJhY3RzXFRpY2tldC5hbGdvLnRzOjExMgoJLy8gbm90ZTogIldpdGhkcmF3biBGdW5kcyBmcm9tIFRpY2tldCBDb250cmFjdCIKCXB1c2hieXRlcyAweDU3Njk3NDY4NjQ3MjYxNzc2ZTIwNDY3NTZlNjQ3MzIwNjY3MjZmNmQyMDU0Njk2MzZiNjU3NDIwNDM2ZjZlNzQ3MjYxNjM3NCAvLyAiV2l0aGRyYXduIEZ1bmRzIGZyb20gVGlja2V0IENvbnRyYWN0IgoJaXR4bl9maWVsZCBOb3RlCgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50YyAxIC8vIDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoJcmV0c3ViCgovLyBzZW5kVGlja2V0cyhhbW91bnRUb1NlbmQ6IHVpbnQ2NCwgcmVjZWl2ZXI6QWRkcmVzcyk6IHVpbnQ2NAovLwovLyBTZW5kcyBhIHNwZWNpZmllZCBhbW91bnQgb2YgdG9rZW5zIGZyb20gYSB0b2tlbiBkcm9wIHRvIHRoZSBnaXZlbiByZWNlaXZlcgovLyBhbmQgdXBkYXRlcyB0aGUgcmVtYWluaW5nIGJhbGFuY2Ugb2YgdGhlIGRyb3AuIElmIHRoZSBkcm9wIGlzIGZ1bGx5IGNsYWltZWQsCi8vIGl0IGlzIHJlbW92ZWQgZnJvbSB0aGUgYWN0aXZlIGRyb3BzLgovLwovLyBAcGFyYW0ge3VpbnQ2NH0gYW1vdW50VG9TZW5kIC0gSW5mb3JtYXRpb24gYWJvdXQgdGhlIHRva2VuIGRyb3AsIGluY2x1ZGluZyB0aGUgdG9rZW4gdHlwZSBhbmQgcmVtYWluaW5nIGJhbGFuY2UuCi8vIEBwYXJhbSB7QWRkcmVzc30gcmVjZWl2ZXIgLSBUaGUgYWRkcmVzcyBvZiB0aGUgcmVjaXBpZW50IHdobyB3aWxsIHJlY2VpdmUgdGhlIHRva2Vucy4KLy8gQHJldHVybiB7dWludDY0fSBUaGUgcmVtYWluaW5nIGJhbGFuY2Ugb2YgdG9rZW5zIGluIHRoZSB0b2tlbiBkcm9wIGFmdGVyIHRoZSB0cmFuc2Zlci4Kc2VuZFRpY2tldHM6Cglwcm90byAyIDEKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZWMgNCAvLyAweAoKCS8vIGNvbnRyYWN0c1xUaWNrZXQuYWxnby50czoxMzIKCS8vIHNlbmRBc3NldFRyYW5zZmVyKHsKCS8vICAgICAgICAgICB4ZmVyQXNzZXQ6IEFzc2V0SUQuZnJvbVVpbnQ2NCh0aGlzLmFzc2V0SUQudmFsdWUpLAoJLy8gICAgICAgICAgIGFzc2V0UmVjZWl2ZXI6IHJlY2VpdmVyLAoJLy8gICAgICAgICAgIGFzc2V0QW1vdW50OiBhbW91bnRUb1NlbmQsCgkvLyAgICAgICB9KQoJaXR4bl9iZWdpbgoJcHVzaGludCA0IC8vIGF4ZmVyCglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gY29udHJhY3RzXFRpY2tldC5hbGdvLnRzOjEzMwoJLy8geGZlckFzc2V0OiBBc3NldElELmZyb21VaW50NjQodGhpcy5hc3NldElELnZhbHVlKQoJYnl0ZWMgMyAvLyAgImFzc2V0SUQiCglhcHBfZ2xvYmFsX2dldAoJaXR4bl9maWVsZCBYZmVyQXNzZXQKCgkvLyBjb250cmFjdHNcVGlja2V0LmFsZ28udHM6MTM0CgkvLyBhc3NldFJlY2VpdmVyOiByZWNlaXZlcgoJZnJhbWVfZGlnIC0yIC8vIHJlY2VpdmVyOiBBZGRyZXNzCglpdHhuX2ZpZWxkIEFzc2V0UmVjZWl2ZXIKCgkvLyBjb250cmFjdHNcVGlja2V0LmFsZ28udHM6MTM1CgkvLyBhc3NldEFtb3VudDogYW1vdW50VG9TZW5kCglmcmFtZV9kaWcgLTEgLy8gYW1vdW50VG9TZW5kOiB1aW50NjQKCWl0eG5fZmllbGQgQXNzZXRBbW91bnQKCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnRjIDEgLy8gMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CgoJLy8gY29udHJhY3RzXFRpY2tldC5hbGdvLnRzOjEzOQoJLy8gcmVtYWluaW5nID0gdGhpcy50aWNrZXRzUmVtYWluaW5nLnZhbHVlIC0gYW1vdW50VG9TZW5kCglieXRlYyAxIC8vICAidGlja2V0c1JlbWFpbmluZyIKCWFwcF9nbG9iYWxfZ2V0CglmcmFtZV9kaWcgLTEgLy8gYW1vdW50VG9TZW5kOiB1aW50NjQKCS0KCWZyYW1lX2J1cnkgMCAvLyByZW1haW5pbmc6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0c1xUaWNrZXQuYWxnby50czoxNDEKCS8vIHJldHVybiByZW1haW5pbmcKCWZyYW1lX2RpZyAwIC8vIHJlbWFpbmluZzogdWludDY0CgoJLy8gc2V0IHRoZSBzdWJyb3V0aW5lIHJldHVybiB2YWx1ZQoJZnJhbWVfYnVyeSAwCglyZXRzdWIKCipjcmVhdGVfTm9PcDoKCXB1c2hieXRlcyAweDgwMDdmMmRhIC8vIG1ldGhvZCAiY3JlYXRlQXBwbGljYXRpb24oc3RyaW5nLHN0cmluZyx1aW50NjQsdWludDY0LHVpbnQ2NCl2b2lkIgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggKmFiaV9yb3V0ZV9jcmVhdGVBcHBsaWNhdGlvbgoKCS8vIHRoaXMgY29udHJhY3QgZG9lcyBub3QgaW1wbGVtZW50IHRoZSBnaXZlbiBBQkkgbWV0aG9kIGZvciBjcmVhdGUgTm9PcAoJZXJyCgoqY2FsbF9Ob09wOgoJcHVzaGJ5dGVzIDB4MDE2YTQ1MDAgLy8gbWV0aG9kICJjcmVhdGVUaWNrZXRzKHN0cmluZyx1aW50NjQpdm9pZCIKCXB1c2hieXRlcyAweGUzZTdiMzAzIC8vIG1ldGhvZCAicmVnaXN0ZXJFdmVudChzdHJpbmcpdm9pZCIKCXB1c2hieXRlcyAweGI0ZGM1MTQxIC8vIG1ldGhvZCAid2l0aERyYXdGdW5kcyh1aW50NjQpdm9pZCIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoICphYmlfcm91dGVfY3JlYXRlVGlja2V0cyAqYWJpX3JvdXRlX3JlZ2lzdGVyRXZlbnQgKmFiaV9yb3V0ZV93aXRoRHJhd0Z1bmRzCgoJLy8gdGhpcyBjb250cmFjdCBkb2VzIG5vdCBpbXBsZW1lbnQgdGhlIGdpdmVuIEFCSSBtZXRob2QgZm9yIGNhbGwgTm9PcAoJZXJy","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiACAQAmBQ9yZWdpc3RlcmVkQ291bnQQdGlja2V0c1JlbWFpbmluZwlldmVudE5hbWUHYXNzZXRJRAAxGBSBBgsxGQiNDAF5AAAAAAAAAAAAAAFrAAAAAAAAAAAAAAA2GgUXNhoEFzYaAxc2GgJXAgA2GgFXAgCIAAIiQ4oFAIAOY3JlYXRvckFkZHJlc3MxAGcqi/9JFRZXBgJMUGeACGxvY2F0aW9ui/5JFRZXBgJMUGeAB2VuZFRpbWWL/GcoI2eACXN0YXJ0VGltZYv9Z4AJZXZlbnRDb3N0i/tnKShkZ4k2GgIXNhoBVwIAiAACIkOKAgAnBDEANjIAcgdIEkSxgQOyEIv+siIjsiOABFRDS1SyJSpkVwIAsiaL/7IngbgXsgGztDyMACuLAGeJNhoBVwIAiAACIkOKAQAxAL1MSBREKGQiCChMZzEASbxIi/9JFRZXBgJMUL8xACKIAEKJNhoBF4gAAiJDigEAsSKyEIv/sgiAJFdpdGhkcmF3biBGdW5kcyBmcm9tIFRpY2tldCBDb250cmFjdLIFI7IBs4mKAgEnBLGBBLIQK2SyEYv+shSL/7ISI7IBsylki/8JjACLAIwAiYAEgAfy2jYaAI4B/okAgAQBakUAgATj57MDgAS03FFBNhoAjgP+7/87/24A","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":3,"minor":27,"patch":0,"commitHash":"f54f0997"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the Ticket contract
 */
export type TicketArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication(string,string,uint64,uint64,uint64)void': {
      eventName: string
      location: string
      startTime: bigint | number
      endTime: bigint | number
      eventCost: bigint | number
    }
    'createTickets(string,uint64)void': {
      assetUrl: string
      totalTickets: bigint | number
    }
    'registerEvent(string)void': {
      email: string
    }
    'withDrawFunds(uint64)void': {
      funds: bigint | number
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication(string,string,uint64,uint64,uint64)void': [eventName: string, location: string, startTime: bigint | number, endTime: bigint | number, eventCost: bigint | number]
    'createTickets(string,uint64)void': [assetUrl: string, totalTickets: bigint | number]
    'registerEvent(string)void': [email: string]
    'withDrawFunds(uint64)void': [funds: bigint | number]
  }
}

/**
 * The return type for each method
 */
export type TicketReturns = {
  'createApplication(string,string,uint64,uint64,uint64)void': void
  'createTickets(string,uint64)void': void
  'registerEvent(string)void': void
  'withDrawFunds(uint64)void': void
}

/**
 * Defines the types of available calls and state of the Ticket smart contract.
 */
export type TicketTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(string,string,uint64,uint64,uint64)void' | 'createApplication', {
      argsObj: TicketArgs['obj']['createApplication(string,string,uint64,uint64,uint64)void']
      argsTuple: TicketArgs['tuple']['createApplication(string,string,uint64,uint64,uint64)void']
      returns: TicketReturns['createApplication(string,string,uint64,uint64,uint64)void']
    }>
    & Record<'createTickets(string,uint64)void' | 'createTickets', {
      argsObj: TicketArgs['obj']['createTickets(string,uint64)void']
      argsTuple: TicketArgs['tuple']['createTickets(string,uint64)void']
      returns: TicketReturns['createTickets(string,uint64)void']
    }>
    & Record<'registerEvent(string)void' | 'registerEvent', {
      argsObj: TicketArgs['obj']['registerEvent(string)void']
      argsTuple: TicketArgs['tuple']['registerEvent(string)void']
      returns: TicketReturns['registerEvent(string)void']
    }>
    & Record<'withDrawFunds(uint64)void' | 'withDrawFunds', {
      argsObj: TicketArgs['obj']['withDrawFunds(uint64)void']
      argsTuple: TicketArgs['tuple']['withDrawFunds(uint64)void']
      returns: TicketReturns['withDrawFunds(uint64)void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        creatorAddress: string
        eventName: string
        location: string
        startTime: bigint
        endTime: bigint
        registeredCount: bigint
        eventCost: bigint
        assetId: bigint
        ticketsRemaining: bigint
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        registeredMap: Map<string, string>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type TicketSignatures = keyof TicketTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type TicketNonVoidMethodSignatures = keyof TicketTypes['methods'] extends infer T ? T extends keyof TicketTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Ticket smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends TicketSignatures> = TicketTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Ticket smart contract to the method's return type
 */
export type MethodReturn<TSignature extends TicketSignatures> = TicketTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = TicketTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = TicketTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type TicketCreateCallParams =
  | Expand<CallParams<TicketArgs['obj']['createApplication(string,string,uint64,uint64,uint64)void'] | TicketArgs['tuple']['createApplication(string,string,uint64,uint64,uint64)void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<TicketArgs['obj']['createApplication(string,string,uint64,uint64,uint64)void'] | TicketArgs['tuple']['createApplication(string,string,uint64,uint64,uint64)void']> & {method: 'createApplication(string,string,uint64,uint64,uint64)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type TicketDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: TicketCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Ticket smart contract
 */
export abstract class TicketParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends TicketCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication(string,string,uint64,uint64,uint64)void':
            return TicketParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the Ticket smart contract using the createApplication(string,string,uint64,uint64,uint64)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<TicketArgs['obj']['createApplication(string,string,uint64,uint64,uint64)void'] | TicketArgs['tuple']['createApplication(string,string,uint64,uint64,uint64)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication(string,string,uint64,uint64,uint64)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.eventName, params.args.location, params.args.startTime, params.args.endTime, params.args.eventCost],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the createTickets(string,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createTickets(params: CallParams<TicketArgs['obj']['createTickets(string,uint64)void'] | TicketArgs['tuple']['createTickets(string,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'createTickets(string,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetUrl, params.args.totalTickets],
    }
  }
  /**
   * Constructs a no op call for the registerEvent(string)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static registerEvent(params: CallParams<TicketArgs['obj']['registerEvent(string)void'] | TicketArgs['tuple']['registerEvent(string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'registerEvent(string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.email],
    }
  }
  /**
   * Constructs a no op call for the withDrawFunds(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static withDrawFunds(params: CallParams<TicketArgs['obj']['withDrawFunds(uint64)void'] | TicketArgs['tuple']['withDrawFunds(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'withDrawFunds(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.funds],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the Ticket smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class TicketFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `TicketFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new TicketClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new TicketClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the Ticket smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: TicketDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? TicketParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (TicketCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new TicketClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Ticket smart contract using the createApplication(string,string,uint64,uint64,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<TicketArgs['obj']['createApplication(string,string,uint64,uint64,uint64)void'] | TicketArgs['tuple']['createApplication(string,string,uint64,uint64,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(TicketParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Ticket smart contract using the createApplication(string,string,uint64,uint64,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<TicketArgs['obj']['createApplication(string,string,uint64,uint64,uint64)void'] | TicketArgs['tuple']['createApplication(string,string,uint64,uint64,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(TicketParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Ticket smart contract using an ABI method call using the createApplication(string,string,uint64,uint64,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<TicketArgs['obj']['createApplication(string,string,uint64,uint64,uint64)void'] | TicketArgs['tuple']['createApplication(string,string,uint64,uint64,uint64)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(TicketParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | TicketReturns['createApplication(string,string,uint64,uint64,uint64)void']) }, appClient: new TicketClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the Ticket smart contract
 */
export class TicketClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `TicketClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Ticket app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `TicketClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends TicketNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `TicketClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<TicketClient> {
    return new TicketClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `TicketClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<TicketClient> {
    return new TicketClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the Ticket smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the Ticket smart contract using the `createTickets(string,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createTickets: (params: CallParams<TicketArgs['obj']['createTickets(string,uint64)void'] | TicketArgs['tuple']['createTickets(string,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TicketParamsFactory.createTickets(params))
    },

    /**
     * Makes a call to the Ticket smart contract using the `registerEvent(string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    registerEvent: (params: CallParams<TicketArgs['obj']['registerEvent(string)void'] | TicketArgs['tuple']['registerEvent(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TicketParamsFactory.registerEvent(params))
    },

    /**
     * Makes a call to the Ticket smart contract using the `withDrawFunds(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    withDrawFunds: (params: CallParams<TicketArgs['obj']['withDrawFunds(uint64)void'] | TicketArgs['tuple']['withDrawFunds(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TicketParamsFactory.withDrawFunds(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the Ticket smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the Ticket smart contract using the `createTickets(string,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createTickets: (params: CallParams<TicketArgs['obj']['createTickets(string,uint64)void'] | TicketArgs['tuple']['createTickets(string,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TicketParamsFactory.createTickets(params))
    },

    /**
     * Makes a call to the Ticket smart contract using the `registerEvent(string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    registerEvent: (params: CallParams<TicketArgs['obj']['registerEvent(string)void'] | TicketArgs['tuple']['registerEvent(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TicketParamsFactory.registerEvent(params))
    },

    /**
     * Makes a call to the Ticket smart contract using the `withDrawFunds(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    withDrawFunds: (params: CallParams<TicketArgs['obj']['withDrawFunds(uint64)void'] | TicketArgs['tuple']['withDrawFunds(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TicketParamsFactory.withDrawFunds(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the Ticket smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the Ticket smart contract using the `createTickets(string,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createTickets: async (params: CallParams<TicketArgs['obj']['createTickets(string,uint64)void'] | TicketArgs['tuple']['createTickets(string,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TicketParamsFactory.createTickets(params))
      return {...result, return: result.return as unknown as (undefined | TicketReturns['createTickets(string,uint64)void'])}
    },

    /**
     * Makes a call to the Ticket smart contract using the `registerEvent(string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    registerEvent: async (params: CallParams<TicketArgs['obj']['registerEvent(string)void'] | TicketArgs['tuple']['registerEvent(string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TicketParamsFactory.registerEvent(params))
      return {...result, return: result.return as unknown as (undefined | TicketReturns['registerEvent(string)void'])}
    },

    /**
     * Makes a call to the Ticket smart contract using the `withDrawFunds(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    withDrawFunds: async (params: CallParams<TicketArgs['obj']['withDrawFunds(uint64)void'] | TicketArgs['tuple']['withDrawFunds(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TicketParamsFactory.withDrawFunds(params))
      return {...result, return: result.return as unknown as (undefined | TicketReturns['withDrawFunds(uint64)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new TicketClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current Ticket app
   */
  state = {
    /**
     * Methods to access global state for the current Ticket app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          creatorAddress: result.creatorAddress,
          eventName: result.eventName,
          location: result.location,
          startTime: result.startTime,
          endTime: result.endTime,
          registeredCount: result.registeredCount,
          eventCost: result.eventCost,
          assetId: result.assetID,
          ticketsRemaining: result.ticketsRemaining,
        }
      },
      /**
       * Get the current value of the creatorAddress key in global state
       */
      creatorAddress: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("creatorAddress")) as string | undefined },
      /**
       * Get the current value of the eventName key in global state
       */
      eventName: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("eventName")) as string | undefined },
      /**
       * Get the current value of the location key in global state
       */
      location: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("location")) as string | undefined },
      /**
       * Get the current value of the startTime key in global state
       */
      startTime: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("startTime")) as bigint | undefined },
      /**
       * Get the current value of the endTime key in global state
       */
      endTime: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("endTime")) as bigint | undefined },
      /**
       * Get the current value of the registeredCount key in global state
       */
      registeredCount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("registeredCount")) as bigint | undefined },
      /**
       * Get the current value of the eventCost key in global state
       */
      eventCost: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("eventCost")) as bigint | undefined },
      /**
       * Get the current value of the assetID key in global state
       */
      assetId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("assetID")) as bigint | undefined },
      /**
       * Get the current value of the ticketsRemaining key in global state
       */
      ticketsRemaining: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("ticketsRemaining")) as bigint | undefined },
    },
    /**
     * Methods to access box state for the current Ticket app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the registeredMap map in box state
       */
      registeredMap: {
        /**
         * Get all current values of the registeredMap map in box state
         */
        getMap: async (): Promise<Map<string, string>> => { return (await this.appClient.state.box.getMap("registeredMap")) as Map<string, string> },
        /**
         * Get a current value of the registeredMap map by key from box state
         */
        value: async (key: string): Promise<string | undefined> => { return await this.appClient.state.box.getMapValue("registeredMap", key) as string | undefined },
      },
    },
  }

  public newGroup(): TicketComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a createTickets(string,uint64)void method call against the Ticket contract
       */
      createTickets(params: CallParams<TicketArgs['obj']['createTickets(string,uint64)void'] | TicketArgs['tuple']['createTickets(string,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createTickets(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a registerEvent(string)void method call against the Ticket contract
       */
      registerEvent(params: CallParams<TicketArgs['obj']['registerEvent(string)void'] | TicketArgs['tuple']['registerEvent(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.registerEvent(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a withDrawFunds(uint64)void method call against the Ticket contract
       */
      withDrawFunds(params: CallParams<TicketArgs['obj']['withDrawFunds(uint64)void'] | TicketArgs['tuple']['withDrawFunds(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.withDrawFunds(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the Ticket contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as TicketComposer
  }
}
export type TicketComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the createTickets(string,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createTickets(params?: CallParams<TicketArgs['obj']['createTickets(string,uint64)void'] | TicketArgs['tuple']['createTickets(string,uint64)void']>): TicketComposer<[...TReturns, TicketReturns['createTickets(string,uint64)void'] | undefined]>

  /**
   * Calls the registerEvent(string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  registerEvent(params?: CallParams<TicketArgs['obj']['registerEvent(string)void'] | TicketArgs['tuple']['registerEvent(string)void']>): TicketComposer<[...TReturns, TicketReturns['registerEvent(string)void'] | undefined]>

  /**
   * Calls the withDrawFunds(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withDrawFunds(params?: CallParams<TicketArgs['obj']['withDrawFunds(uint64)void'] | TicketArgs['tuple']['withDrawFunds(uint64)void']>): TicketComposer<[...TReturns, TicketReturns['withDrawFunds(uint64)void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the Ticket smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): TicketComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): TicketComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<TicketComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<TicketComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<TicketComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<TicketComposerResults<TReturns>>
}
export type TicketComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

