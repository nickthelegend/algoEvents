/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'

export const APP_SPEC: Arc56Contract = {"name":"Ticket","desc":"","methods":[{"name":"createApplication","args":[{"name":"eventName","type":"string"},{"name":"location","type":"string"},{"name":"startTime","type":"uint64"},{"name":"endTime","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"createTickets","args":[{"name":"assetUrl","type":"string"},{"name":"totalTickets","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"registerEvent","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}}],"arcs":[4,56],"structs":{},"state":{"schema":{"global":{"bytes":3,"ints":5},"local":{"bytes":0,"ints":0}},"keys":{"global":{"creatorAddress":{"key":"Y3JlYXRvckFkZHJlc3M=","keyType":"AVMBytes","valueType":"address"},"eventName":{"key":"ZXZlbnROYW1l","keyType":"AVMBytes","valueType":"string"},"location":{"key":"bG9jYXRpb24=","keyType":"AVMBytes","valueType":"string"},"startTime":{"key":"c3RhcnRUaW1l","keyType":"AVMBytes","valueType":"uint64"},"endTime":{"key":"ZW5kVGltZQ==","keyType":"AVMBytes","valueType":"uint64"},"registeredCount":{"key":"cmVnaXN0ZXJlZENvdW50","keyType":"AVMBytes","valueType":"uint64"},"assetID":{"key":"YXNzZXRJRA==","keyType":"AVMBytes","valueType":"uint64"},"ticketsRemaining":{"key":"dGlja2V0c1JlbWFpbmluZw==","keyType":"AVMBytes","valueType":"uint64"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"registeredMap":{"keyType":"address","valueType":"byte[32]"}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts\\Ticket.algo.ts:29","pc":[0]},{"teal":2,"source":"contracts\\Ticket.algo.ts:29","pc":[1,2,3,4]},{"teal":3,"source":"contracts\\Ticket.algo.ts:29","pc":[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33]},{"teal":15,"source":"contracts\\Ticket.algo.ts:29","pc":[34,35]},{"teal":16,"source":"contracts\\Ticket.algo.ts:29","pc":[36]},{"teal":17,"source":"contracts\\Ticket.algo.ts:29","pc":[37,38]},{"teal":18,"source":"contracts\\Ticket.algo.ts:29","pc":[39]},{"teal":19,"source":"contracts\\Ticket.algo.ts:29","pc":[40,41]},{"teal":20,"source":"contracts\\Ticket.algo.ts:29","pc":[42]},{"teal":21,"source":"contracts\\Ticket.algo.ts:29","pc":[43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68]},{"teal":25,"source":"contracts\\Ticket.algo.ts:29","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[69]},{"teal":30,"source":"contracts\\Ticket.algo.ts:44","pc":[70,71,72]},{"teal":31,"source":"contracts\\Ticket.algo.ts:44","pc":[73]},{"teal":34,"source":"contracts\\Ticket.algo.ts:44","pc":[74,75,76]},{"teal":35,"source":"contracts\\Ticket.algo.ts:44","pc":[77]},{"teal":38,"source":"contracts\\Ticket.algo.ts:44","pc":[78,79,80]},{"teal":39,"source":"contracts\\Ticket.algo.ts:44","pc":[81,82,83]},{"teal":42,"source":"contracts\\Ticket.algo.ts:44","pc":[84,85,86]},{"teal":43,"source":"contracts\\Ticket.algo.ts:44","pc":[87,88,89]},{"teal":46,"source":"contracts\\Ticket.algo.ts:44","pc":[90,91,92]},{"teal":47,"source":"contracts\\Ticket.algo.ts:44","pc":[93]},{"teal":48,"source":"contracts\\Ticket.algo.ts:44","pc":[94]},{"teal":52,"source":"contracts\\Ticket.algo.ts:44","pc":[95,96,97]},{"teal":56,"source":"contracts\\Ticket.algo.ts:46","pc":[98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113]},{"teal":57,"source":"contracts\\Ticket.algo.ts:46","pc":[114,115]},{"teal":58,"source":"contracts\\Ticket.algo.ts:46","pc":[116]},{"teal":62,"source":"contracts\\Ticket.algo.ts:47","pc":[117]},{"teal":63,"source":"contracts\\Ticket.algo.ts:47","pc":[118,119]},{"teal":64,"source":"contracts\\Ticket.algo.ts:47","pc":[120]},{"teal":65,"source":"contracts\\Ticket.algo.ts:47","pc":[121]},{"teal":66,"source":"contracts\\Ticket.algo.ts:47","pc":[122]},{"teal":67,"source":"contracts\\Ticket.algo.ts:47","pc":[123,124,125]},{"teal":68,"source":"contracts\\Ticket.algo.ts:47","pc":[126]},{"teal":69,"source":"contracts\\Ticket.algo.ts:47","pc":[127]},{"teal":70,"source":"contracts\\Ticket.algo.ts:47","pc":[128]},{"teal":74,"source":"contracts\\Ticket.algo.ts:48","pc":[129,130,131,132,133,134,135,136,137,138]},{"teal":75,"source":"contracts\\Ticket.algo.ts:48","pc":[139,140]},{"teal":76,"source":"contracts\\Ticket.algo.ts:48","pc":[141]},{"teal":77,"source":"contracts\\Ticket.algo.ts:48","pc":[142]},{"teal":78,"source":"contracts\\Ticket.algo.ts:48","pc":[143]},{"teal":79,"source":"contracts\\Ticket.algo.ts:48","pc":[144,145,146]},{"teal":80,"source":"contracts\\Ticket.algo.ts:48","pc":[147]},{"teal":81,"source":"contracts\\Ticket.algo.ts:48","pc":[148]},{"teal":82,"source":"contracts\\Ticket.algo.ts:48","pc":[149]},{"teal":86,"source":"contracts\\Ticket.algo.ts:49","pc":[150,151,152,153,154,155,156,157,158]},{"teal":87,"source":"contracts\\Ticket.algo.ts:49","pc":[159,160]},{"teal":88,"source":"contracts\\Ticket.algo.ts:49","pc":[161]},{"teal":92,"source":"contracts\\Ticket.algo.ts:50","pc":[162]},{"teal":93,"source":"contracts\\Ticket.algo.ts:50","pc":[163]},{"teal":94,"source":"contracts\\Ticket.algo.ts:50","pc":[164]},{"teal":98,"source":"contracts\\Ticket.algo.ts:51","pc":[165,166,167,168,169,170,171,172,173,174,175]},{"teal":99,"source":"contracts\\Ticket.algo.ts:51","pc":[176,177]},{"teal":100,"source":"contracts\\Ticket.algo.ts:51","pc":[178]},{"teal":101,"source":"contracts\\Ticket.algo.ts:44","pc":[179]},{"teal":106,"source":"contracts\\Ticket.algo.ts:61","pc":[180,181,182]},{"teal":107,"source":"contracts\\Ticket.algo.ts:61","pc":[183]},{"teal":110,"source":"contracts\\Ticket.algo.ts:61","pc":[184,185,186]},{"teal":111,"source":"contracts\\Ticket.algo.ts:61","pc":[187,188,189]},{"teal":114,"source":"contracts\\Ticket.algo.ts:61","pc":[190,191,192]},{"teal":115,"source":"contracts\\Ticket.algo.ts:61","pc":[193]},{"teal":116,"source":"contracts\\Ticket.algo.ts:61","pc":[194]},{"teal":120,"source":"contracts\\Ticket.algo.ts:61","pc":[195,196,197]},{"teal":123,"source":"contracts\\Ticket.algo.ts:61","pc":[198]},{"teal":127,"source":"contracts\\Ticket.algo.ts:63","pc":[199,200]},{"teal":128,"source":"contracts\\Ticket.algo.ts:63","pc":[201,202,203]},{"teal":129,"source":"contracts\\Ticket.algo.ts:63","pc":[204,205]},{"teal":130,"source":"contracts\\Ticket.algo.ts:63","pc":[206]},{"teal":131,"source":"contracts\\Ticket.algo.ts:63","pc":[207]},{"teal":134,"source":"contracts\\Ticket.algo.ts:63","errorMessage":"Only The Event Creator can Mint Tickets","pc":[208]},{"teal":139,"source":"contracts\\Ticket.algo.ts:65","pc":[209,210]},{"teal":140,"source":"contracts\\Ticket.algo.ts:65","pc":[211,212,213]},{"teal":141,"source":"contracts\\Ticket.algo.ts:65","pc":[214]},{"teal":142,"source":"contracts\\Ticket.algo.ts:65","pc":[215,216,217]},{"teal":147,"source":"contracts\\Ticket.algo.ts:66","pc":[218]},{"teal":150,"source":"contracts\\Ticket.algo.ts:66","errorMessage":"The Maximum number of Tickets that can minted are 255","pc":[219]},{"teal":166,"source":"contracts\\Ticket.algo.ts:68","pc":[220]},{"teal":167,"source":"contracts\\Ticket.algo.ts:68","pc":[221,222]},{"teal":168,"source":"contracts\\Ticket.algo.ts:68","pc":[223,224]},{"teal":172,"source":"contracts\\Ticket.algo.ts:69","pc":[225,226]},{"teal":173,"source":"contracts\\Ticket.algo.ts:69","pc":[227,228]},{"teal":177,"source":"contracts\\Ticket.algo.ts:70","pc":[229]},{"teal":178,"source":"contracts\\Ticket.algo.ts:70","pc":[230,231]},{"teal":182,"source":"contracts\\Ticket.algo.ts:71","pc":[232,233,234,235,236,237]},{"teal":183,"source":"contracts\\Ticket.algo.ts:71","pc":[238,239]},{"teal":187,"source":"contracts\\Ticket.algo.ts:72","pc":[240]},{"teal":188,"source":"contracts\\Ticket.algo.ts:72","pc":[241]},{"teal":189,"source":"contracts\\Ticket.algo.ts:72","pc":[242,243,244]},{"teal":190,"source":"contracts\\Ticket.algo.ts:72","pc":[245,246]},{"teal":194,"source":"contracts\\Ticket.algo.ts:73","pc":[247,248]},{"teal":195,"source":"contracts\\Ticket.algo.ts:73","pc":[249,250]},{"teal":199,"source":"contracts\\Ticket.algo.ts:74","pc":[251,252,253]},{"teal":200,"source":"contracts\\Ticket.algo.ts:74","pc":[254,255]},{"teal":203,"source":"contracts\\Ticket.algo.ts:68","pc":[256]},{"teal":204,"source":"contracts\\Ticket.algo.ts:68","pc":[257,258]},{"teal":205,"source":"contracts\\Ticket.algo.ts:68","pc":[259,260]},{"teal":206,"source":"contracts\\Ticket.algo.ts:61","pc":[261]},{"teal":211,"source":"contracts\\Ticket.algo.ts:87","pc":[262,263,264]},{"teal":212,"source":"contracts\\Ticket.algo.ts:87","pc":[265]},{"teal":213,"source":"contracts\\Ticket.algo.ts:87","pc":[266]},{"teal":217,"source":"contracts\\Ticket.algo.ts:87","pc":[267,268,269]},{"teal":221,"source":"contracts\\Ticket.algo.ts:90","pc":[270,271]},{"teal":222,"source":"contracts\\Ticket.algo.ts:90","pc":[272]},{"teal":223,"source":"contracts\\Ticket.algo.ts:90","pc":[273]},{"teal":224,"source":"contracts\\Ticket.algo.ts:90","pc":[274]},{"teal":225,"source":"contracts\\Ticket.algo.ts:90","pc":[275]},{"teal":228,"source":"contracts\\Ticket.algo.ts:90","errorMessage":"already claimed","pc":[276]},{"teal":232,"source":"contracts\\Ticket.algo.ts:91","pc":[277]},{"teal":233,"source":"contracts\\Ticket.algo.ts:91","pc":[278]},{"teal":234,"source":"contracts\\Ticket.algo.ts:91","pc":[279]},{"teal":235,"source":"contracts\\Ticket.algo.ts:91","pc":[280]},{"teal":236,"source":"contracts\\Ticket.algo.ts:91","pc":[281]},{"teal":237,"source":"contracts\\Ticket.algo.ts:91","pc":[282]},{"teal":238,"source":"contracts\\Ticket.algo.ts:91","pc":[283]},{"teal":242,"source":"contracts\\Ticket.algo.ts:92","pc":[284,285]},{"teal":243,"source":"contracts\\Ticket.algo.ts:92","pc":[286,287]},{"teal":244,"source":"contracts\\Ticket.algo.ts:92","pc":[288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321]},{"teal":245,"source":"contracts\\Ticket.algo.ts:92","pc":[322]},{"teal":246,"source":"contracts\\Ticket.algo.ts:92","pc":[323]},{"teal":247,"source":"contracts\\Ticket.algo.ts:92","pc":[324,325,326]},{"teal":248,"source":"contracts\\Ticket.algo.ts:92","pc":[327]},{"teal":249,"source":"contracts\\Ticket.algo.ts:92","pc":[328]},{"teal":250,"source":"contracts\\Ticket.algo.ts:92","pc":[329]},{"teal":251,"source":"contracts\\Ticket.algo.ts:92","pc":[330,331,332]},{"teal":252,"source":"contracts\\Ticket.algo.ts:92","pc":[333]},{"teal":256,"source":"contracts\\Ticket.algo.ts:97","pc":[334,335]},{"teal":257,"source":"contracts\\Ticket.algo.ts:97","pc":[336]},{"teal":258,"source":"contracts\\Ticket.algo.ts:97","pc":[337,338,339]},{"teal":259,"source":"contracts\\Ticket.algo.ts:87","pc":[340]},{"teal":271,"source":"contracts\\Ticket.algo.ts:125","pc":[341,342,343]},{"teal":274,"source":"contracts\\Ticket.algo.ts:125","pc":[344]},{"teal":282,"source":"contracts\\Ticket.algo.ts:126","pc":[345]},{"teal":283,"source":"contracts\\Ticket.algo.ts:126","pc":[346,347]},{"teal":284,"source":"contracts\\Ticket.algo.ts:126","pc":[348,349]},{"teal":288,"source":"contracts\\Ticket.algo.ts:127","pc":[350,351,352,353,354,355,356,357,358]},{"teal":289,"source":"contracts\\Ticket.algo.ts:127","pc":[359]},{"teal":290,"source":"contracts\\Ticket.algo.ts:127","pc":[360,361]},{"teal":294,"source":"contracts\\Ticket.algo.ts:128","pc":[362,363]},{"teal":295,"source":"contracts\\Ticket.algo.ts:128","pc":[364,365]},{"teal":299,"source":"contracts\\Ticket.algo.ts:129","pc":[366,367]},{"teal":300,"source":"contracts\\Ticket.algo.ts:129","pc":[368,369]},{"teal":303,"source":"contracts\\Ticket.algo.ts:126","pc":[370]},{"teal":304,"source":"contracts\\Ticket.algo.ts:126","pc":[371,372]},{"teal":307,"source":"contracts\\Ticket.algo.ts:126","pc":[373]},{"teal":311,"source":"contracts\\Ticket.algo.ts:133","pc":[374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391]},{"teal":312,"source":"contracts\\Ticket.algo.ts:133","pc":[392]},{"teal":313,"source":"contracts\\Ticket.algo.ts:133","pc":[393,394]},{"teal":314,"source":"contracts\\Ticket.algo.ts:133","pc":[395]},{"teal":315,"source":"contracts\\Ticket.algo.ts:133","pc":[396,397]},{"teal":319,"source":"contracts\\Ticket.algo.ts:135","pc":[398,399]},{"teal":322,"source":"contracts\\Ticket.algo.ts:125","pc":[400,401]},{"teal":323,"source":"contracts\\Ticket.algo.ts:125","pc":[402]},{"teal":326,"source":"contracts\\Ticket.algo.ts:29","pc":[403,404,405,406,407,408]},{"teal":327,"source":"contracts\\Ticket.algo.ts:29","pc":[409,410,411]},{"teal":328,"source":"contracts\\Ticket.algo.ts:29","pc":[412,413,414,415]},{"teal":331,"source":"contracts\\Ticket.algo.ts:29","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[416]},{"teal":334,"source":"contracts\\Ticket.algo.ts:29","pc":[417,418,419,420,421,422]},{"teal":335,"source":"contracts\\Ticket.algo.ts:29","pc":[423,424,425,426,427,428]},{"teal":336,"source":"contracts\\Ticket.algo.ts:29","pc":[429,430,431]},{"teal":337,"source":"contracts\\Ticket.algo.ts:29","pc":[432,433,434,435,436,437]},{"teal":340,"source":"contracts\\Ticket.algo.ts:29","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[438]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiACAQAmAw9yZWdpc3RlcmVkQ291bnQACWV2ZW50TmFtZTEYFIEGCzEZCI0MAVwAAAAAAAAAAAAAAU4AAAAAAAAAAAAAADYaBBc2GgMXNhoCVwIANhoBVwIAiAACIkOKBACADmNyZWF0b3JBZGRyZXNzMQBnKov/SRUWVwYCTFBngAhsb2NhdGlvbov+SRUWVwYCTFBngAdlbmRUaW1li/xnKCNngAlzdGFydFRpbWWL/WeJNhoCFzYaAVcCAIgAAiJDigIAKTEANjIAcgdIEkSL/oH/AQ1BAAIjRLGBA7IQi/6yIiOyI4AEVENLVLIlKmRXAgCyJov/sieBuBeyAbO0PIwAiYgAAiJDigAAMQC9TEgURChkIggoTGcxADEXgCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFBJVyAAKahEVwAgvzEAIogAAYmKAgEpsYEEshCAB2Fzc2V0SURkshGL/rIUi/+yEiOyAbOAEHRpY2tldHNSZW1haW5pbmdki/8JjACLAIwAiYAECJNnCTYaAI4B/qYAgAQBakUAgASJllw7NhoAjgL+/v9QAA==","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":3,"minor":27,"patch":0,"commitHash":"f54f0997"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the Ticket contract
 */
export type TicketArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication(string,string,uint64,uint64)void': {
      eventName: string
      location: string
      startTime: bigint | number
      endTime: bigint | number
    }
    'createTickets(string,uint64)void': {
      assetUrl: string
      totalTickets: bigint | number
    }
    'registerEvent()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication(string,string,uint64,uint64)void': [eventName: string, location: string, startTime: bigint | number, endTime: bigint | number]
    'createTickets(string,uint64)void': [assetUrl: string, totalTickets: bigint | number]
    'registerEvent()void': []
  }
}

/**
 * The return type for each method
 */
export type TicketReturns = {
  'createApplication(string,string,uint64,uint64)void': void
  'createTickets(string,uint64)void': void
  'registerEvent()void': void
}

/**
 * Defines the types of available calls and state of the Ticket smart contract.
 */
export type TicketTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(string,string,uint64,uint64)void' | 'createApplication', {
      argsObj: TicketArgs['obj']['createApplication(string,string,uint64,uint64)void']
      argsTuple: TicketArgs['tuple']['createApplication(string,string,uint64,uint64)void']
      returns: TicketReturns['createApplication(string,string,uint64,uint64)void']
    }>
    & Record<'createTickets(string,uint64)void' | 'createTickets', {
      argsObj: TicketArgs['obj']['createTickets(string,uint64)void']
      argsTuple: TicketArgs['tuple']['createTickets(string,uint64)void']
      returns: TicketReturns['createTickets(string,uint64)void']
    }>
    & Record<'registerEvent()void' | 'registerEvent', {
      argsObj: TicketArgs['obj']['registerEvent()void']
      argsTuple: TicketArgs['tuple']['registerEvent()void']
      returns: TicketReturns['registerEvent()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        creatorAddress: string
        eventName: string
        location: string
        startTime: bigint
        endTime: bigint
        registeredCount: bigint
        assetId: bigint
        ticketsRemaining: bigint
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        registeredMap: Map<string, Uint8Array>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type TicketSignatures = keyof TicketTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type TicketNonVoidMethodSignatures = keyof TicketTypes['methods'] extends infer T ? T extends keyof TicketTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Ticket smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends TicketSignatures> = TicketTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Ticket smart contract to the method's return type
 */
export type MethodReturn<TSignature extends TicketSignatures> = TicketTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = TicketTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = TicketTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type TicketCreateCallParams =
  | Expand<CallParams<TicketArgs['obj']['createApplication(string,string,uint64,uint64)void'] | TicketArgs['tuple']['createApplication(string,string,uint64,uint64)void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<TicketArgs['obj']['createApplication(string,string,uint64,uint64)void'] | TicketArgs['tuple']['createApplication(string,string,uint64,uint64)void']> & {method: 'createApplication(string,string,uint64,uint64)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type TicketDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: TicketCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Ticket smart contract
 */
export abstract class TicketParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends TicketCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication(string,string,uint64,uint64)void':
            return TicketParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the Ticket smart contract using the createApplication(string,string,uint64,uint64)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<TicketArgs['obj']['createApplication(string,string,uint64,uint64)void'] | TicketArgs['tuple']['createApplication(string,string,uint64,uint64)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication(string,string,uint64,uint64)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.eventName, params.args.location, params.args.startTime, params.args.endTime],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the createTickets(string,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createTickets(params: CallParams<TicketArgs['obj']['createTickets(string,uint64)void'] | TicketArgs['tuple']['createTickets(string,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'createTickets(string,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetUrl, params.args.totalTickets],
    }
  }
  /**
   * Constructs a no op call for the registerEvent()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static registerEvent(params: CallParams<TicketArgs['obj']['registerEvent()void'] | TicketArgs['tuple']['registerEvent()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'registerEvent()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the Ticket smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class TicketFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `TicketFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new TicketClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new TicketClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the Ticket smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: TicketDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? TicketParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (TicketCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new TicketClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Ticket smart contract using the createApplication(string,string,uint64,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<TicketArgs['obj']['createApplication(string,string,uint64,uint64)void'] | TicketArgs['tuple']['createApplication(string,string,uint64,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(TicketParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Ticket smart contract using the createApplication(string,string,uint64,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<TicketArgs['obj']['createApplication(string,string,uint64,uint64)void'] | TicketArgs['tuple']['createApplication(string,string,uint64,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(TicketParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Ticket smart contract using an ABI method call using the createApplication(string,string,uint64,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<TicketArgs['obj']['createApplication(string,string,uint64,uint64)void'] | TicketArgs['tuple']['createApplication(string,string,uint64,uint64)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(TicketParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | TicketReturns['createApplication(string,string,uint64,uint64)void']) }, appClient: new TicketClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the Ticket smart contract
 */
export class TicketClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `TicketClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Ticket app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `TicketClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends TicketNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `TicketClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<TicketClient> {
    return new TicketClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `TicketClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<TicketClient> {
    return new TicketClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the Ticket smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the Ticket smart contract using the `createTickets(string,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createTickets: (params: CallParams<TicketArgs['obj']['createTickets(string,uint64)void'] | TicketArgs['tuple']['createTickets(string,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TicketParamsFactory.createTickets(params))
    },

    /**
     * Makes a call to the Ticket smart contract using the `registerEvent()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    registerEvent: (params: CallParams<TicketArgs['obj']['registerEvent()void'] | TicketArgs['tuple']['registerEvent()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(TicketParamsFactory.registerEvent(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the Ticket smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the Ticket smart contract using the `createTickets(string,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createTickets: (params: CallParams<TicketArgs['obj']['createTickets(string,uint64)void'] | TicketArgs['tuple']['createTickets(string,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TicketParamsFactory.createTickets(params))
    },

    /**
     * Makes a call to the Ticket smart contract using the `registerEvent()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    registerEvent: (params: CallParams<TicketArgs['obj']['registerEvent()void'] | TicketArgs['tuple']['registerEvent()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(TicketParamsFactory.registerEvent(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the Ticket smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the Ticket smart contract using the `createTickets(string,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createTickets: async (params: CallParams<TicketArgs['obj']['createTickets(string,uint64)void'] | TicketArgs['tuple']['createTickets(string,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TicketParamsFactory.createTickets(params))
      return {...result, return: result.return as unknown as (undefined | TicketReturns['createTickets(string,uint64)void'])}
    },

    /**
     * Makes a call to the Ticket smart contract using the `registerEvent()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    registerEvent: async (params: CallParams<TicketArgs['obj']['registerEvent()void'] | TicketArgs['tuple']['registerEvent()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(TicketParamsFactory.registerEvent(params))
      return {...result, return: result.return as unknown as (undefined | TicketReturns['registerEvent()void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new TicketClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current Ticket app
   */
  state = {
    /**
     * Methods to access global state for the current Ticket app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          creatorAddress: result.creatorAddress,
          eventName: result.eventName,
          location: result.location,
          startTime: result.startTime,
          endTime: result.endTime,
          registeredCount: result.registeredCount,
          assetId: result.assetID,
          ticketsRemaining: result.ticketsRemaining,
        }
      },
      /**
       * Get the current value of the creatorAddress key in global state
       */
      creatorAddress: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("creatorAddress")) as string | undefined },
      /**
       * Get the current value of the eventName key in global state
       */
      eventName: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("eventName")) as string | undefined },
      /**
       * Get the current value of the location key in global state
       */
      location: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("location")) as string | undefined },
      /**
       * Get the current value of the startTime key in global state
       */
      startTime: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("startTime")) as bigint | undefined },
      /**
       * Get the current value of the endTime key in global state
       */
      endTime: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("endTime")) as bigint | undefined },
      /**
       * Get the current value of the registeredCount key in global state
       */
      registeredCount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("registeredCount")) as bigint | undefined },
      /**
       * Get the current value of the assetID key in global state
       */
      assetId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("assetID")) as bigint | undefined },
      /**
       * Get the current value of the ticketsRemaining key in global state
       */
      ticketsRemaining: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("ticketsRemaining")) as bigint | undefined },
    },
    /**
     * Methods to access box state for the current Ticket app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the registeredMap map in box state
       */
      registeredMap: {
        /**
         * Get all current values of the registeredMap map in box state
         */
        getMap: async (): Promise<Map<string, Uint8Array>> => { return (await this.appClient.state.box.getMap("registeredMap")) as Map<string, Uint8Array> },
        /**
         * Get a current value of the registeredMap map by key from box state
         */
        value: async (key: string): Promise<Uint8Array | undefined> => { return await this.appClient.state.box.getMapValue("registeredMap", key) as Uint8Array | undefined },
      },
    },
  }

  public newGroup(): TicketComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a createTickets(string,uint64)void method call against the Ticket contract
       */
      createTickets(params: CallParams<TicketArgs['obj']['createTickets(string,uint64)void'] | TicketArgs['tuple']['createTickets(string,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createTickets(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a registerEvent()void method call against the Ticket contract
       */
      registerEvent(params: CallParams<TicketArgs['obj']['registerEvent()void'] | TicketArgs['tuple']['registerEvent()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.registerEvent(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the Ticket contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as TicketComposer
  }
}
export type TicketComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the createTickets(string,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createTickets(params?: CallParams<TicketArgs['obj']['createTickets(string,uint64)void'] | TicketArgs['tuple']['createTickets(string,uint64)void']>): TicketComposer<[...TReturns, TicketReturns['createTickets(string,uint64)void'] | undefined]>

  /**
   * Calls the registerEvent()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  registerEvent(params?: CallParams<TicketArgs['obj']['registerEvent()void'] | TicketArgs['tuple']['registerEvent()void']>): TicketComposer<[...TReturns, TicketReturns['registerEvent()void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the Ticket smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): TicketComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): TicketComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<TicketComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<TicketComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<TicketComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<TicketComposerResults<TReturns>>
}
export type TicketComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

