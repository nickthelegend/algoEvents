/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'

export const APP_SPEC: Arc56Contract = {"name":"Ticket","desc":"","methods":[{"name":"createApplication","args":[{"name":"eventName","type":"string"},{"name":"location","type":"string"},{"name":"startTime","type":"uint64"},{"name":"endTime","type":"uint64"},{"name":"eventCost","type":"uint64"},{"name":"ticketsRemaining","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"createTickets","args":[{"name":"assetUrl","type":"string"},{"name":"totalTickets","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"registerEvent","args":[{"name":"email","type":"string"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"withDrawFunds","args":[{"name":"funds","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}}],"arcs":[4,56],"structs":{},"state":{"schema":{"global":{"bytes":3,"ints":6},"local":{"bytes":0,"ints":0}},"keys":{"global":{"creatorAddress":{"key":"Y3JlYXRvckFkZHJlc3M=","keyType":"AVMBytes","valueType":"address"},"eventName":{"key":"ZXZlbnROYW1l","keyType":"AVMBytes","valueType":"string"},"location":{"key":"bG9jYXRpb24=","keyType":"AVMBytes","valueType":"string"},"startTime":{"key":"c3RhcnRUaW1l","keyType":"AVMBytes","valueType":"uint64"},"endTime":{"key":"ZW5kVGltZQ==","keyType":"AVMBytes","valueType":"uint64"},"registeredCount":{"key":"cmVnaXN0ZXJlZENvdW50","keyType":"AVMBytes","valueType":"uint64"},"eventCost":{"key":"ZXZlbnRDb3N0","keyType":"AVMBytes","valueType":"uint64"},"assetID":{"key":"YXNzZXRJRA==","keyType":"AVMBytes","valueType":"uint64"},"ticketsRemaining":{"key":"dGlja2V0c1JlbWFpbmluZw==","keyType":"AVMBytes","valueType":"uint64"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"registeredMap":{"keyType":"address","valueType":"string"}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts\\Ticket.algo.ts:31","pc":[0]},{"teal":2,"source":"contracts\\Ticket.algo.ts:31","pc":[1,2,3,4]},{"teal":3,"source":"contracts\\Ticket.algo.ts:31","pc":[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58]},{"teal":15,"source":"contracts\\Ticket.algo.ts:31","pc":[59,60]},{"teal":16,"source":"contracts\\Ticket.algo.ts:31","pc":[61]},{"teal":17,"source":"contracts\\Ticket.algo.ts:31","pc":[62,63]},{"teal":18,"source":"contracts\\Ticket.algo.ts:31","pc":[64]},{"teal":19,"source":"contracts\\Ticket.algo.ts:31","pc":[65,66]},{"teal":20,"source":"contracts\\Ticket.algo.ts:31","pc":[67]},{"teal":21,"source":"contracts\\Ticket.algo.ts:31","pc":[68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93]},{"teal":25,"source":"contracts\\Ticket.algo.ts:31","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[94]},{"teal":30,"source":"contracts\\Ticket.algo.ts:48","pc":[95,96,97]},{"teal":31,"source":"contracts\\Ticket.algo.ts:48","pc":[98]},{"teal":34,"source":"contracts\\Ticket.algo.ts:48","pc":[99,100,101]},{"teal":35,"source":"contracts\\Ticket.algo.ts:48","pc":[102]},{"teal":38,"source":"contracts\\Ticket.algo.ts:48","pc":[103,104,105]},{"teal":39,"source":"contracts\\Ticket.algo.ts:48","pc":[106]},{"teal":42,"source":"contracts\\Ticket.algo.ts:48","pc":[107,108,109]},{"teal":43,"source":"contracts\\Ticket.algo.ts:48","pc":[110]},{"teal":46,"source":"contracts\\Ticket.algo.ts:48","pc":[111,112,113]},{"teal":47,"source":"contracts\\Ticket.algo.ts:48","pc":[114,115,116]},{"teal":50,"source":"contracts\\Ticket.algo.ts:48","pc":[117,118,119]},{"teal":51,"source":"contracts\\Ticket.algo.ts:48","pc":[120,121,122]},{"teal":54,"source":"contracts\\Ticket.algo.ts:48","pc":[123,124,125]},{"teal":55,"source":"contracts\\Ticket.algo.ts:48","pc":[126]},{"teal":56,"source":"contracts\\Ticket.algo.ts:48","pc":[127]},{"teal":60,"source":"contracts\\Ticket.algo.ts:48","pc":[128,129,130]},{"teal":64,"source":"contracts\\Ticket.algo.ts:50","pc":[131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146]},{"teal":65,"source":"contracts\\Ticket.algo.ts:50","pc":[147,148]},{"teal":66,"source":"contracts\\Ticket.algo.ts:50","pc":[149]},{"teal":70,"source":"contracts\\Ticket.algo.ts:51","pc":[150]},{"teal":71,"source":"contracts\\Ticket.algo.ts:51","pc":[151,152]},{"teal":72,"source":"contracts\\Ticket.algo.ts:51","pc":[153]},{"teal":73,"source":"contracts\\Ticket.algo.ts:51","pc":[154]},{"teal":74,"source":"contracts\\Ticket.algo.ts:51","pc":[155]},{"teal":75,"source":"contracts\\Ticket.algo.ts:51","pc":[156,157,158]},{"teal":76,"source":"contracts\\Ticket.algo.ts:51","pc":[159]},{"teal":77,"source":"contracts\\Ticket.algo.ts:51","pc":[160]},{"teal":78,"source":"contracts\\Ticket.algo.ts:51","pc":[161]},{"teal":82,"source":"contracts\\Ticket.algo.ts:52","pc":[162,163,164,165,166,167,168,169,170,171]},{"teal":83,"source":"contracts\\Ticket.algo.ts:52","pc":[172,173]},{"teal":84,"source":"contracts\\Ticket.algo.ts:52","pc":[174]},{"teal":85,"source":"contracts\\Ticket.algo.ts:52","pc":[175]},{"teal":86,"source":"contracts\\Ticket.algo.ts:52","pc":[176]},{"teal":87,"source":"contracts\\Ticket.algo.ts:52","pc":[177,178,179]},{"teal":88,"source":"contracts\\Ticket.algo.ts:52","pc":[180]},{"teal":89,"source":"contracts\\Ticket.algo.ts:52","pc":[181]},{"teal":90,"source":"contracts\\Ticket.algo.ts:52","pc":[182]},{"teal":94,"source":"contracts\\Ticket.algo.ts:53","pc":[183,184,185,186,187,188,189,190,191]},{"teal":95,"source":"contracts\\Ticket.algo.ts:53","pc":[192,193]},{"teal":96,"source":"contracts\\Ticket.algo.ts:53","pc":[194]},{"teal":100,"source":"contracts\\Ticket.algo.ts:54","pc":[195]},{"teal":101,"source":"contracts\\Ticket.algo.ts:54","pc":[196]},{"teal":102,"source":"contracts\\Ticket.algo.ts:54","pc":[197]},{"teal":106,"source":"contracts\\Ticket.algo.ts:55","pc":[198,199,200,201,202,203,204,205,206,207,208]},{"teal":107,"source":"contracts\\Ticket.algo.ts:55","pc":[209,210]},{"teal":108,"source":"contracts\\Ticket.algo.ts:55","pc":[211]},{"teal":112,"source":"contracts\\Ticket.algo.ts:56","pc":[212,213,214,215,216,217,218,219,220,221,222]},{"teal":113,"source":"contracts\\Ticket.algo.ts:56","pc":[223,224]},{"teal":114,"source":"contracts\\Ticket.algo.ts:56","pc":[225]},{"teal":118,"source":"contracts\\Ticket.algo.ts:57","pc":[226]},{"teal":119,"source":"contracts\\Ticket.algo.ts:57","pc":[227,228]},{"teal":120,"source":"contracts\\Ticket.algo.ts:57","pc":[229]},{"teal":121,"source":"contracts\\Ticket.algo.ts:48","pc":[230]},{"teal":126,"source":"contracts\\Ticket.algo.ts:65","pc":[231,232,233]},{"teal":127,"source":"contracts\\Ticket.algo.ts:65","pc":[234]},{"teal":130,"source":"contracts\\Ticket.algo.ts:65","pc":[235,236,237]},{"teal":131,"source":"contracts\\Ticket.algo.ts:65","pc":[238,239,240]},{"teal":134,"source":"contracts\\Ticket.algo.ts:65","pc":[241,242,243]},{"teal":135,"source":"contracts\\Ticket.algo.ts:65","pc":[244]},{"teal":136,"source":"contracts\\Ticket.algo.ts:65","pc":[245]},{"teal":140,"source":"contracts\\Ticket.algo.ts:65","pc":[246,247,248]},{"teal":143,"source":"contracts\\Ticket.algo.ts:65","pc":[249,250]},{"teal":147,"source":"contracts\\Ticket.algo.ts:67","pc":[251,252]},{"teal":148,"source":"contracts\\Ticket.algo.ts:67","pc":[253,254,255]},{"teal":149,"source":"contracts\\Ticket.algo.ts:67","pc":[256,257]},{"teal":150,"source":"contracts\\Ticket.algo.ts:67","pc":[258]},{"teal":151,"source":"contracts\\Ticket.algo.ts:67","pc":[259]},{"teal":154,"source":"contracts\\Ticket.algo.ts:67","errorMessage":"Only The Event Creator can Mint Tickets","pc":[260]},{"teal":169,"source":"contracts\\Ticket.algo.ts:70","pc":[261]},{"teal":170,"source":"contracts\\Ticket.algo.ts:70","pc":[262,263]},{"teal":171,"source":"contracts\\Ticket.algo.ts:70","pc":[264,265]},{"teal":175,"source":"contracts\\Ticket.algo.ts:71","pc":[266,267]},{"teal":176,"source":"contracts\\Ticket.algo.ts:71","pc":[268,269]},{"teal":180,"source":"contracts\\Ticket.algo.ts:72","pc":[270]},{"teal":181,"source":"contracts\\Ticket.algo.ts:72","pc":[271,272]},{"teal":185,"source":"contracts\\Ticket.algo.ts:73","pc":[273,274,275,276,277,278]},{"teal":186,"source":"contracts\\Ticket.algo.ts:73","pc":[279,280]},{"teal":190,"source":"contracts\\Ticket.algo.ts:74","pc":[281]},{"teal":191,"source":"contracts\\Ticket.algo.ts:74","pc":[282]},{"teal":192,"source":"contracts\\Ticket.algo.ts:74","pc":[283,284,285]},{"teal":193,"source":"contracts\\Ticket.algo.ts:74","pc":[286,287]},{"teal":197,"source":"contracts\\Ticket.algo.ts:75","pc":[288,289]},{"teal":198,"source":"contracts\\Ticket.algo.ts:75","pc":[290,291]},{"teal":202,"source":"contracts\\Ticket.algo.ts:76","pc":[292,293,294]},{"teal":203,"source":"contracts\\Ticket.algo.ts:76","pc":[295,296]},{"teal":206,"source":"contracts\\Ticket.algo.ts:70","pc":[297]},{"teal":207,"source":"contracts\\Ticket.algo.ts:70","pc":[298,299]},{"teal":208,"source":"contracts\\Ticket.algo.ts:70","pc":[300,301]},{"teal":212,"source":"contracts\\Ticket.algo.ts:83","pc":[302]},{"teal":213,"source":"contracts\\Ticket.algo.ts:83","pc":[303,304]},{"teal":214,"source":"contracts\\Ticket.algo.ts:83","pc":[305]},{"teal":215,"source":"contracts\\Ticket.algo.ts:65","pc":[306]},{"teal":220,"source":"contracts\\Ticket.algo.ts:91","pc":[307,308,309]},{"teal":221,"source":"contracts\\Ticket.algo.ts:91","pc":[310,311,312]},{"teal":224,"source":"contracts\\Ticket.algo.ts:91","pc":[313,314,315]},{"teal":225,"source":"contracts\\Ticket.algo.ts:91","pc":[316]},{"teal":226,"source":"contracts\\Ticket.algo.ts:91","pc":[317]},{"teal":230,"source":"contracts\\Ticket.algo.ts:91","pc":[318,319,320]},{"teal":234,"source":"contracts\\Ticket.algo.ts:94","pc":[321,322]},{"teal":235,"source":"contracts\\Ticket.algo.ts:94","pc":[323]},{"teal":236,"source":"contracts\\Ticket.algo.ts:94","pc":[324]},{"teal":237,"source":"contracts\\Ticket.algo.ts:94","pc":[325]},{"teal":238,"source":"contracts\\Ticket.algo.ts:94","pc":[326]},{"teal":241,"source":"contracts\\Ticket.algo.ts:94","errorMessage":"already claimed","pc":[327]},{"teal":245,"source":"contracts\\Ticket.algo.ts:95","pc":[328]},{"teal":246,"source":"contracts\\Ticket.algo.ts:95","pc":[329]},{"teal":247,"source":"contracts\\Ticket.algo.ts:95","pc":[330]},{"teal":248,"source":"contracts\\Ticket.algo.ts:95","pc":[331]},{"teal":249,"source":"contracts\\Ticket.algo.ts:95","pc":[332]},{"teal":250,"source":"contracts\\Ticket.algo.ts:95","pc":[333]},{"teal":251,"source":"contracts\\Ticket.algo.ts:95","pc":[334]},{"teal":255,"source":"contracts\\Ticket.algo.ts:96","pc":[335,336]},{"teal":256,"source":"contracts\\Ticket.algo.ts:96","pc":[337]},{"teal":257,"source":"contracts\\Ticket.algo.ts:96","pc":[338]},{"teal":258,"source":"contracts\\Ticket.algo.ts:96","pc":[339]},{"teal":259,"source":"contracts\\Ticket.algo.ts:96","pc":[340,341]},{"teal":260,"source":"contracts\\Ticket.algo.ts:96","pc":[342]},{"teal":261,"source":"contracts\\Ticket.algo.ts:96","pc":[343]},{"teal":262,"source":"contracts\\Ticket.algo.ts:96","pc":[344]},{"teal":263,"source":"contracts\\Ticket.algo.ts:96","pc":[345,346,347]},{"teal":264,"source":"contracts\\Ticket.algo.ts:96","pc":[348]},{"teal":265,"source":"contracts\\Ticket.algo.ts:96","pc":[349]},{"teal":266,"source":"contracts\\Ticket.algo.ts:96","pc":[350]},{"teal":270,"source":"contracts\\Ticket.algo.ts:101","pc":[351,352]},{"teal":271,"source":"contracts\\Ticket.algo.ts:101","pc":[353]},{"teal":272,"source":"contracts\\Ticket.algo.ts:101","pc":[354,355,356]},{"teal":273,"source":"contracts\\Ticket.algo.ts:91","pc":[357]},{"teal":278,"source":"contracts\\Ticket.algo.ts:109","pc":[358,359,360]},{"teal":279,"source":"contracts\\Ticket.algo.ts:109","pc":[361]},{"teal":282,"source":"contracts\\Ticket.algo.ts:109","pc":[362,363,364]},{"teal":283,"source":"contracts\\Ticket.algo.ts:109","pc":[365]},{"teal":284,"source":"contracts\\Ticket.algo.ts:109","pc":[366]},{"teal":288,"source":"contracts\\Ticket.algo.ts:109","pc":[367,368,369]},{"teal":292,"source":"contracts\\Ticket.algo.ts:112","pc":[370]},{"teal":293,"source":"contracts\\Ticket.algo.ts:112","pc":[371]},{"teal":294,"source":"contracts\\Ticket.algo.ts:112","pc":[372,373]},{"teal":298,"source":"contracts\\Ticket.algo.ts:112","pc":[374,375]},{"teal":299,"source":"contracts\\Ticket.algo.ts:112","pc":[376,377]},{"teal":303,"source":"contracts\\Ticket.algo.ts:112","pc":[378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415]},{"teal":304,"source":"contracts\\Ticket.algo.ts:112","pc":[416,417]},{"teal":307,"source":"contracts\\Ticket.algo.ts:112","pc":[418]},{"teal":308,"source":"contracts\\Ticket.algo.ts:112","pc":[419,420]},{"teal":311,"source":"contracts\\Ticket.algo.ts:112","pc":[421]},{"teal":312,"source":"contracts\\Ticket.algo.ts:109","pc":[422]},{"teal":324,"source":"contracts\\Ticket.algo.ts:131","pc":[423,424,425]},{"teal":327,"source":"contracts\\Ticket.algo.ts:131","pc":[426,427]},{"teal":335,"source":"contracts\\Ticket.algo.ts:132","pc":[428]},{"teal":336,"source":"contracts\\Ticket.algo.ts:132","pc":[429,430]},{"teal":337,"source":"contracts\\Ticket.algo.ts:132","pc":[431,432]},{"teal":341,"source":"contracts\\Ticket.algo.ts:133","pc":[433]},{"teal":342,"source":"contracts\\Ticket.algo.ts:133","pc":[434]},{"teal":343,"source":"contracts\\Ticket.algo.ts:133","pc":[435,436]},{"teal":347,"source":"contracts\\Ticket.algo.ts:134","pc":[437,438]},{"teal":348,"source":"contracts\\Ticket.algo.ts:134","pc":[439,440]},{"teal":352,"source":"contracts\\Ticket.algo.ts:135","pc":[441,442]},{"teal":353,"source":"contracts\\Ticket.algo.ts:135","pc":[443,444]},{"teal":356,"source":"contracts\\Ticket.algo.ts:132","pc":[445]},{"teal":357,"source":"contracts\\Ticket.algo.ts:132","pc":[446,447]},{"teal":360,"source":"contracts\\Ticket.algo.ts:132","pc":[448]},{"teal":364,"source":"contracts\\Ticket.algo.ts:139","pc":[449]},{"teal":365,"source":"contracts\\Ticket.algo.ts:139","pc":[450]},{"teal":366,"source":"contracts\\Ticket.algo.ts:139","pc":[451,452]},{"teal":367,"source":"contracts\\Ticket.algo.ts:139","pc":[453]},{"teal":368,"source":"contracts\\Ticket.algo.ts:139","pc":[454,455]},{"teal":372,"source":"contracts\\Ticket.algo.ts:141","pc":[456,457]},{"teal":375,"source":"contracts\\Ticket.algo.ts:131","pc":[458,459]},{"teal":376,"source":"contracts\\Ticket.algo.ts:131","pc":[460]},{"teal":379,"source":"contracts\\Ticket.algo.ts:31","pc":[461,462,463,464,465,466]},{"teal":380,"source":"contracts\\Ticket.algo.ts:31","pc":[467,468,469]},{"teal":381,"source":"contracts\\Ticket.algo.ts:31","pc":[470,471,472,473]},{"teal":384,"source":"contracts\\Ticket.algo.ts:31","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[474]},{"teal":387,"source":"contracts\\Ticket.algo.ts:31","pc":[475,476,477,478,479,480]},{"teal":388,"source":"contracts\\Ticket.algo.ts:31","pc":[481,482,483,484,485,486]},{"teal":389,"source":"contracts\\Ticket.algo.ts:31","pc":[487,488,489,490,491,492]},{"teal":390,"source":"contracts\\Ticket.algo.ts:31","pc":[493,494,495]},{"teal":391,"source":"contracts\\Ticket.algo.ts:31","pc":[496,497,498,499,500,501,502,503]},{"teal":394,"source":"contracts\\Ticket.algo.ts:31","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[504]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiACAQAmBQ9yZWdpc3RlcmVkQ291bnQQdGlja2V0c1JlbWFpbmluZwlldmVudE5hbWUHYXNzZXRJRAAxGBSBBgsxGQiNDAF9AAAAAAAAAAAAAAFvAAAAAAAAAAAAAAA2GgYXNhoFFzYaBBc2GgMXNhoCVwIANhoBVwIAiAACIkOKBgCADmNyZWF0b3JBZGRyZXNzMQBnKov/SRUWVwYCTFBngAhsb2NhdGlvbov+SRUWVwYCTFBngAdlbmRUaW1li/xnKCNngAlzdGFydFRpbWWL/WeACWV2ZW50Q29zdIv7ZymL+meJNhoCFzYaAVcCAIgAAiJDigIAJwQxADYyAHIHSBJEsYEDshCL/rIiI7IjgARUQ0tUsiUqZFcCALImi/+yJ4G4F7IBs7Q8jAAriwBniTYaAVcCAIgAAiJDigEAMQC9TEgURChkIggoTGcxAEm8SIv/SRUWVwYCTFC/MQAiiABCiTYaAReIAAIiQ4oBALEishCL/7IIgCRXaXRoZHJhd24gRnVuZHMgZnJvbSBUaWNrZXQgQ29udHJhY3SyBSOyAbOJigIBJwSxgQSyECtkshGL/rIUi/+yEiOyAbMpZIv/CYwAiwCMAImABFdTmys2GgCOAf6FAIAEAWpFAIAE4+ezA4AEtNxRQTYaAI4D/u//O/9uAA==","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":3,"minor":27,"patch":0,"commitHash":"f54f0997"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the Ticket contract
 */
export type TicketArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication(string,string,uint64,uint64,uint64,uint64)void': {
      eventName: string
      location: string
      startTime: bigint | number
      endTime: bigint | number
      eventCost: bigint | number
      ticketsRemaining: bigint | number
    }
    'createTickets(string,uint64)void': {
      assetUrl: string
      totalTickets: bigint | number
    }
    'registerEvent(string)void': {
      email: string
    }
    'withDrawFunds(uint64)void': {
      funds: bigint | number
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication(string,string,uint64,uint64,uint64,uint64)void': [eventName: string, location: string, startTime: bigint | number, endTime: bigint | number, eventCost: bigint | number, ticketsRemaining: bigint | number]
    'createTickets(string,uint64)void': [assetUrl: string, totalTickets: bigint | number]
    'registerEvent(string)void': [email: string]
    'withDrawFunds(uint64)void': [funds: bigint | number]
  }
}

/**
 * The return type for each method
 */
export type TicketReturns = {
  'createApplication(string,string,uint64,uint64,uint64,uint64)void': void
  'createTickets(string,uint64)void': void
  'registerEvent(string)void': void
  'withDrawFunds(uint64)void': void
}

/**
 * Defines the types of available calls and state of the Ticket smart contract.
 */
export type TicketTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(string,string,uint64,uint64,uint64,uint64)void' | 'createApplication', {
      argsObj: TicketArgs['obj']['createApplication(string,string,uint64,uint64,uint64,uint64)void']
      argsTuple: TicketArgs['tuple']['createApplication(string,string,uint64,uint64,uint64,uint64)void']
      returns: TicketReturns['createApplication(string,string,uint64,uint64,uint64,uint64)void']
    }>
    & Record<'createTickets(string,uint64)void' | 'createTickets', {
      argsObj: TicketArgs['obj']['createTickets(string,uint64)void']
      argsTuple: TicketArgs['tuple']['createTickets(string,uint64)void']
      returns: TicketReturns['createTickets(string,uint64)void']
    }>
    & Record<'registerEvent(string)void' | 'registerEvent', {
      argsObj: TicketArgs['obj']['registerEvent(string)void']
      argsTuple: TicketArgs['tuple']['registerEvent(string)void']
      returns: TicketReturns['registerEvent(string)void']
    }>
    & Record<'withDrawFunds(uint64)void' | 'withDrawFunds', {
      argsObj: TicketArgs['obj']['withDrawFunds(uint64)void']
      argsTuple: TicketArgs['tuple']['withDrawFunds(uint64)void']
      returns: TicketReturns['withDrawFunds(uint64)void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        creatorAddress: string
        eventName: string
        location: string
        startTime: bigint
        endTime: bigint
        registeredCount: bigint
        eventCost: bigint
        assetId: bigint
        ticketsRemaining: bigint
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        registeredMap: Map<string, string>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type TicketSignatures = keyof TicketTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type TicketNonVoidMethodSignatures = keyof TicketTypes['methods'] extends infer T ? T extends keyof TicketTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Ticket smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends TicketSignatures> = TicketTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Ticket smart contract to the method's return type
 */
export type MethodReturn<TSignature extends TicketSignatures> = TicketTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = TicketTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = TicketTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type TicketCreateCallParams =
  | Expand<CallParams<TicketArgs['obj']['createApplication(string,string,uint64,uint64,uint64,uint64)void'] | TicketArgs['tuple']['createApplication(string,string,uint64,uint64,uint64,uint64)void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<TicketArgs['obj']['createApplication(string,string,uint64,uint64,uint64,uint64)void'] | TicketArgs['tuple']['createApplication(string,string,uint64,uint64,uint64,uint64)void']> & {method: 'createApplication(string,string,uint64,uint64,uint64,uint64)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type TicketDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: TicketCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Ticket smart contract
 */
export abstract class TicketParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends TicketCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication(string,string,uint64,uint64,uint64,uint64)void':
            return TicketParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the Ticket smart contract using the createApplication(string,string,uint64,uint64,uint64,uint64)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<TicketArgs['obj']['createApplication(string,string,uint64,uint64,uint64,uint64)void'] | TicketArgs['tuple']['createApplication(string,string,uint64,uint64,uint64,uint64)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication(string,string,uint64,uint64,uint64,uint64)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.eventName, params.args.location, params.args.startTime, params.args.endTime, params.args.eventCost, params.args.ticketsRemaining],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the createTickets(string,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createTickets(params: CallParams<TicketArgs['obj']['createTickets(string,uint64)void'] | TicketArgs['tuple']['createTickets(string,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'createTickets(string,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetUrl, params.args.totalTickets],
    }
  }
  /**
   * Constructs a no op call for the registerEvent(string)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static registerEvent(params: CallParams<TicketArgs['obj']['registerEvent(string)void'] | TicketArgs['tuple']['registerEvent(string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'registerEvent(string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.email],
    }
  }
  /**
   * Constructs a no op call for the withDrawFunds(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static withDrawFunds(params: CallParams<TicketArgs['obj']['withDrawFunds(uint64)void'] | TicketArgs['tuple']['withDrawFunds(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'withDrawFunds(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.funds],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the Ticket smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class TicketFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `TicketFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new TicketClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new TicketClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the Ticket smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: TicketDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? TicketParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (TicketCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new TicketClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Ticket smart contract using the createApplication(string,string,uint64,uint64,uint64,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<TicketArgs['obj']['createApplication(string,string,uint64,uint64,uint64,uint64)void'] | TicketArgs['tuple']['createApplication(string,string,uint64,uint64,uint64,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(TicketParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Ticket smart contract using the createApplication(string,string,uint64,uint64,uint64,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<TicketArgs['obj']['createApplication(string,string,uint64,uint64,uint64,uint64)void'] | TicketArgs['tuple']['createApplication(string,string,uint64,uint64,uint64,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(TicketParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Ticket smart contract using an ABI method call using the createApplication(string,string,uint64,uint64,uint64,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<TicketArgs['obj']['createApplication(string,string,uint64,uint64,uint64,uint64)void'] | TicketArgs['tuple']['createApplication(string,string,uint64,uint64,uint64,uint64)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(TicketParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | TicketReturns['createApplication(string,string,uint64,uint64,uint64,uint64)void']) }, appClient: new TicketClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the Ticket smart contract
 */
export class TicketClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `TicketClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Ticket app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `TicketClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends TicketNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `TicketClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<TicketClient> {
    return new TicketClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `TicketClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<TicketClient> {
    return new TicketClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the Ticket smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the Ticket smart contract using the `createTickets(string,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createTickets: (params: CallParams<TicketArgs['obj']['createTickets(string,uint64)void'] | TicketArgs['tuple']['createTickets(string,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TicketParamsFactory.createTickets(params))
    },

    /**
     * Makes a call to the Ticket smart contract using the `registerEvent(string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    registerEvent: (params: CallParams<TicketArgs['obj']['registerEvent(string)void'] | TicketArgs['tuple']['registerEvent(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TicketParamsFactory.registerEvent(params))
    },

    /**
     * Makes a call to the Ticket smart contract using the `withDrawFunds(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    withDrawFunds: (params: CallParams<TicketArgs['obj']['withDrawFunds(uint64)void'] | TicketArgs['tuple']['withDrawFunds(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TicketParamsFactory.withDrawFunds(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the Ticket smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the Ticket smart contract using the `createTickets(string,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createTickets: (params: CallParams<TicketArgs['obj']['createTickets(string,uint64)void'] | TicketArgs['tuple']['createTickets(string,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TicketParamsFactory.createTickets(params))
    },

    /**
     * Makes a call to the Ticket smart contract using the `registerEvent(string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    registerEvent: (params: CallParams<TicketArgs['obj']['registerEvent(string)void'] | TicketArgs['tuple']['registerEvent(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TicketParamsFactory.registerEvent(params))
    },

    /**
     * Makes a call to the Ticket smart contract using the `withDrawFunds(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    withDrawFunds: (params: CallParams<TicketArgs['obj']['withDrawFunds(uint64)void'] | TicketArgs['tuple']['withDrawFunds(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TicketParamsFactory.withDrawFunds(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the Ticket smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the Ticket smart contract using the `createTickets(string,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createTickets: async (params: CallParams<TicketArgs['obj']['createTickets(string,uint64)void'] | TicketArgs['tuple']['createTickets(string,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TicketParamsFactory.createTickets(params))
      return {...result, return: result.return as unknown as (undefined | TicketReturns['createTickets(string,uint64)void'])}
    },

    /**
     * Makes a call to the Ticket smart contract using the `registerEvent(string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    registerEvent: async (params: CallParams<TicketArgs['obj']['registerEvent(string)void'] | TicketArgs['tuple']['registerEvent(string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TicketParamsFactory.registerEvent(params))
      return {...result, return: result.return as unknown as (undefined | TicketReturns['registerEvent(string)void'])}
    },

    /**
     * Makes a call to the Ticket smart contract using the `withDrawFunds(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    withDrawFunds: async (params: CallParams<TicketArgs['obj']['withDrawFunds(uint64)void'] | TicketArgs['tuple']['withDrawFunds(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TicketParamsFactory.withDrawFunds(params))
      return {...result, return: result.return as unknown as (undefined | TicketReturns['withDrawFunds(uint64)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new TicketClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current Ticket app
   */
  state = {
    /**
     * Methods to access global state for the current Ticket app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          creatorAddress: result.creatorAddress,
          eventName: result.eventName,
          location: result.location,
          startTime: result.startTime,
          endTime: result.endTime,
          registeredCount: result.registeredCount,
          eventCost: result.eventCost,
          assetId: result.assetID,
          ticketsRemaining: result.ticketsRemaining,
        }
      },
      /**
       * Get the current value of the creatorAddress key in global state
       */
      creatorAddress: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("creatorAddress")) as string | undefined },
      /**
       * Get the current value of the eventName key in global state
       */
      eventName: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("eventName")) as string | undefined },
      /**
       * Get the current value of the location key in global state
       */
      location: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("location")) as string | undefined },
      /**
       * Get the current value of the startTime key in global state
       */
      startTime: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("startTime")) as bigint | undefined },
      /**
       * Get the current value of the endTime key in global state
       */
      endTime: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("endTime")) as bigint | undefined },
      /**
       * Get the current value of the registeredCount key in global state
       */
      registeredCount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("registeredCount")) as bigint | undefined },
      /**
       * Get the current value of the eventCost key in global state
       */
      eventCost: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("eventCost")) as bigint | undefined },
      /**
       * Get the current value of the assetID key in global state
       */
      assetId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("assetID")) as bigint | undefined },
      /**
       * Get the current value of the ticketsRemaining key in global state
       */
      ticketsRemaining: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("ticketsRemaining")) as bigint | undefined },
    },
    /**
     * Methods to access box state for the current Ticket app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the registeredMap map in box state
       */
      registeredMap: {
        /**
         * Get all current values of the registeredMap map in box state
         */
        getMap: async (): Promise<Map<string, string>> => { return (await this.appClient.state.box.getMap("registeredMap")) as Map<string, string> },
        /**
         * Get a current value of the registeredMap map by key from box state
         */
        value: async (key: string): Promise<string | undefined> => { return await this.appClient.state.box.getMapValue("registeredMap", key) as string | undefined },
      },
    },
  }

  public newGroup(): TicketComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a createTickets(string,uint64)void method call against the Ticket contract
       */
      createTickets(params: CallParams<TicketArgs['obj']['createTickets(string,uint64)void'] | TicketArgs['tuple']['createTickets(string,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createTickets(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a registerEvent(string)void method call against the Ticket contract
       */
      registerEvent(params: CallParams<TicketArgs['obj']['registerEvent(string)void'] | TicketArgs['tuple']['registerEvent(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.registerEvent(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a withDrawFunds(uint64)void method call against the Ticket contract
       */
      withDrawFunds(params: CallParams<TicketArgs['obj']['withDrawFunds(uint64)void'] | TicketArgs['tuple']['withDrawFunds(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.withDrawFunds(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the Ticket contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as TicketComposer
  }
}
export type TicketComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the createTickets(string,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createTickets(params?: CallParams<TicketArgs['obj']['createTickets(string,uint64)void'] | TicketArgs['tuple']['createTickets(string,uint64)void']>): TicketComposer<[...TReturns, TicketReturns['createTickets(string,uint64)void'] | undefined]>

  /**
   * Calls the registerEvent(string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  registerEvent(params?: CallParams<TicketArgs['obj']['registerEvent(string)void'] | TicketArgs['tuple']['registerEvent(string)void']>): TicketComposer<[...TReturns, TicketReturns['registerEvent(string)void'] | undefined]>

  /**
   * Calls the withDrawFunds(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withDrawFunds(params?: CallParams<TicketArgs['obj']['withDrawFunds(uint64)void'] | TicketArgs['tuple']['withDrawFunds(uint64)void']>): TicketComposer<[...TReturns, TicketReturns['withDrawFunds(uint64)void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the Ticket smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): TicketComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): TicketComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<TicketComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<TicketComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<TicketComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<TicketComposerResults<TReturns>>
}
export type TicketComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

